<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小王架构师之旅路（面试）</title>
    <url>/2017/09/19/code-story/</url>
    <content><![CDATA[<p>  金九银十,是换工作的高峰期,作为运维程师的小王也在蠢蠢欲动,打算给自己换一个钱多,活少,离家近的公司.</p>
<p>  小王投了简历,很快就有了回应,一家软件公司邀请小王去面试.上午打的电话,约得下午1点面试,时间有点仓促,来不及准备,只能裸面(没有准备的面试我们成为裸面).</p>
<p>  到了公司,接待小王的是公司的前台小丽,她把小王安排到了会议室,并很热心的打了一杯水递给小王,让小王稍等,她去喊人事马上过来.看着小丽微微一笑,翩然而去的心影,小王对这家公司有了些许好感,甚至有点期待.</p>
<p>  HR是一个28岁左右的女孩,看了简历,让小王做了下自我介绍,之后问了一些之前公司的事情,聊天过程中问了小王平时都喜欢干什么,优点和缺点,以及对加班的看法.最后问了是否愿意去北京工作.同时介绍了下北京 的工作氛围,公司远景,以及未来的职位晋升.提到职位晋升这让身为陕西人的小王心里有些波动.</p>
<p>  小王来自农村,从小就是个老实孩子,家里也希望他本本分分的工作结婚生子,在北京的一个专科院校毕业后,因为女朋友在上海,所以不辞辛苦来到上海,打算在上海为自己的女朋友拼出一份天地,可是造化弄人,女朋友前几天和自己分手了,分手的理由竟然是—-英语单词量不一样,不适合在一起.<br>  小王知道作为本科生的女朋友雅婷,在大学时候和自己异地,现在已经有喜欢的人了,想到自己前几天才给她贷款买了个iphone作为生日礼物,还骗她说是自己第一个月的工资,心里满满的都是失落,也就同意了HR的提议,愿意去北京发展.他心里暗下决定,一定要在北京出人头地,将来让雅婷后悔去吧.</p>
<p>  HR叫来了技术主管给小王面试,面试官让小王自我介绍下,小王整理下心情回答道:<br>    王赛,25岁,毕业于北京经贸职业学院,在飞扬科技实习一年,熟悉主流的Linux操作系统,学习过mysql数据库,熟悉shell脚本,在实习期间做过一个lamp的网站.用于公司内部论坛.<br>    听着王赛的自我介绍,面试官张强想起了自己,也是25岁的年级,第一次面试,除了学校里学的那些基础知识,其他的都还给老师了,但是自己渴望上进,希望能有个机会发展自己的才华,看着眼前的王赛放佛看到了当年的自己.<br>    面试官张强,是将来被派到北京分公司的主要负责人之一,这也是他主动面试的原因.张强已经暗下决心,只要王赛踏实肯干,张强愿意亲自带他.</p>
<p>  自我介绍之后,面试进入流程化,经典四问开始了:<br>    你做过什么项目?<br>    在项目中你主要负责什么?<br>    在你负责的模块中,遇到过什么问题?你当时怎么解决的?<br>    在上家公司你最大的感悟是什么?</p>
<p>  这样的问题,王赛自然是准备的很充分,我们把控不了面试官的技术问题,这些常见的问题我们还是可以把控的,毕竟准备下就可以了.<br>  显然面试官张强对王赛的项目面试也很满意.张强叫来了HR,让王赛回家等通知.</p>
<p>  王赛回到家,细细想着张强临走前说的话:</p>
<p>  如果想要成为一个架构师,在你目前的基础上需要学很多东西,你至少要掌握,数据库,Linux,架构,开发才能算一个架构师,而一个合格的架构师还有一个重要的品质,那就是分享,我们称之为步道,把自己所学的知识全部传授出去,这才是一个架构师所必备的心态.</p>
<p>  王赛又想起今天问的几个技术问题,自己回答的一塌糊涂:<br>    数据库主从同步在遇到高并发的时候会有什么问题?<br>    一个客户访问网页,从我们技术角度来说是怎样实现的?<br>    如果CPU出现占用率100%的问题,该如何排查?<br>    你之前的公司的监控系统是怎样的?</p>
<p>  不想这么多了,王赛摇了摇头,看着这个不到15平米的出租屋,心里空落落的,从此自己就是孑然一身了,再也不用秒回信息,不用想着买礼物.</p>
<p>  王赛躺下来,又想起了前台那个小姑娘小丽,她的马尾辫,她的背影,她笑起来还真像刚刚分手的女朋友,王赛睡着了,睡梦中又梦见了女友,可这次梦中的女友长得好像小丽………</p>
]]></content>
      <categories>
        <category>故事荟</category>
      </categories>
      <tags>
        <tag>情感</tag>
        <tag>故事</tag>
      </tags>
  </entry>
  <entry>
    <title>github本地库上传到远程库</title>
    <url>/2017/09/12/githubrepo/</url>
    <content><![CDATA[<p>中途出了很多问题。做一个记录，方便以后查阅</p>
<a id="more"></a>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>  工具准备：下载并安装github客户端</p>
<ul>
<li>本地新建一个文件夹，文件夹命名跟远程仓库的名称一样</li>
<li>右键这个文件夹选择<code>Git Bash Here</code></li>
<li>输入命令：<code>git init</code>初始化本地仓库</li>
<li>输入命令：<code>git remote -v</code>查看远程，此时应该是空白的</li>
<li>输入命令：<code>git remote add origin git@github.com:XXXX/xxxx.git</code>将远程仓库增加</li>
<li>输入命令：<code>git remote -v</code>此时应该有显示增加的远程地址仓库</li>
<li>输入命令：<code>git status</code>查看状态，此时文件应该是红色的</li>
<li>输入命令：<code>git add .</code>增加所有</li>
<li>输入命令：<code>git status</code>查看状态，此时文件变为绿色的</li>
<li>输入命令：<code>git commit -m &quot;first commit&quot;</code>这里-m 后面的描述可以随意填写</li>
<li>输入命令：<code>git log</code>查看日志记录</li>
<li>输入命令：<code>git push -u origin master</code>此时如果报错<em>Permission denied (publickey)</em></li>
<li>解决出错的部分：<ul>
<li>输入命令：<code>ssh-keygen -t rsa -C &quot;email地址&quot;</code>这里的Email地址换成你在github上面的email地址</li>
<li>打开本地生成的id_rsa.pub文件，把里面的内容复制放入到github的SSH keys，可以新增一个。</li>
</ul>
</li>
<li>再次输入命令：<code>git push -u origin master</code>此时如果报错* failed to push some refs to *这样的错误</li>
<li>解决出错的部分：<ul>
<li>输入命令：<code>git pull --rebase origin master</code>将仓库做一下合并</li>
</ul>
</li>
<li>再次输入命令：<code>git push -u origin master</code>如果没错误，表示提交成功</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>代码管理</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS6.8搭建自己的Git服务器</title>
    <url>/2017/09/06/bulidgitserver/</url>
    <content><![CDATA[<p>全命令文章，没有太多的文字描述，git是什么？具体各种百科，本文仅仅只是搭建服务器</p>
<a id="more"></a>
<h3 id="安装Git步骤"><a href="#安装Git步骤" class="headerlink" title="安装Git步骤"></a>安装Git步骤</h3><h4 id="检测系统中git的版本"><a href="#检测系统中git的版本" class="headerlink" title="检测系统中git的版本"></a>检测系统中git的版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum info git</span><br></pre></td></tr></table></figure>
<h4 id="下载最新的git（这里目录为opt）"><a href="#下载最新的git（这里目录为opt）" class="headerlink" title="下载最新的git（这里目录为opt）"></a>下载最新的git（这里目录为opt）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -P /opt/ https://www.kernel.org/pub/software/scm/git/git-2.14.1.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="解压git"><a href="#解压git" class="headerlink" title="解压git"></a>解压git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar xzvf git-2-14.1.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="指定要安装的目录"><a href="#指定要安装的目录" class="headerlink" title="指定要安装的目录"></a>指定要安装的目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> git-2-14.1</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/git</span><br></pre></td></tr></table></figure>
<h4 id="安装lib依赖"><a href="#安装lib依赖" class="headerlink" title="安装lib依赖"></a>安装lib依赖</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line"><span class="comment">#如果没有gcc 需要安装gcc</span></span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>
<h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"><span class="comment">#指定安装的路径</span></span><br><span class="line">GIT_ROOT=/usr/<span class="built_in">local</span>/git</span><br><span class="line"><span class="comment">#导出到PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GIT_ROOT</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<h4 id="立即生效"><a href="#立即生效" class="headerlink" title="立即生效"></a>立即生效</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h4 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line"><span class="comment">#出现具体的版本号，表示安装成功</span></span><br></pre></td></tr></table></figure>

<h3 id="建立仓库步骤"><a href="#建立仓库步骤" class="headerlink" title="建立仓库步骤"></a>建立仓库步骤</h3><h4 id="建立用户"><a href="#建立用户" class="headerlink" title="建立用户"></a>建立用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd git <span class="comment">#表示用户为git</span></span><br><span class="line">passwd git <span class="comment">#表示密码为git</span></span><br></pre></td></tr></table></figure>
<h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - git</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
<h4 id="在用户的目录下创建-ssh目录，并进入"><a href="#在用户的目录下创建-ssh目录，并进入" class="headerlink" title="在用户的目录下创建.ssh目录，并进入"></a>在用户的目录下创建.ssh目录，并进入</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git</span><br><span class="line">mkdir .ssh &amp;&amp; <span class="built_in">cd</span> .ssh</span><br></pre></td></tr></table></figure>
<h4 id="不要切换目录，继续当前目录下创建"><a href="#不要切换目录，继续当前目录下创建" class="headerlink" title="不要切换目录，继续当前目录下创建"></a>不要切换目录，继续当前目录下创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#此文件用来记录用户，不可以随意修改名称</span></span><br><span class="line">touch authorized_keys</span><br></pre></td></tr></table></figure>
<h4 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下命令使用root用户执行</span></span><br><span class="line">mkdir /var/git &amp;&amp; <span class="built_in">cd</span> /var/git</span><br><span class="line">git init --bare itjason.git</span><br><span class="line">chown -R git:git itjason.git</span><br></pre></td></tr></table></figure>
<h4 id="禁用shell"><a href="#禁用shell" class="headerlink" title="禁用shell"></a>禁用shell</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下命令使用root用户执行</span></span><br><span class="line">vi /etc/passwd</span><br><span class="line">git:x:1000:1000::/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure>

<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><h4 id="本地机器安装git"><a href="#本地机器安装git" class="headerlink" title="本地机器安装git"></a>本地机器安装git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Windows</span></span><br><span class="line">https://git-scm.com/download/win</span><br></pre></td></tr></table></figure>
<h4 id="本地打开git-bash，生成公钥"><a href="#本地打开git-bash，生成公钥" class="headerlink" title="本地打开git bash，生成公钥"></a>本地打开git bash，生成公钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"itjason.com@gmail.com"</span></span><br><span class="line"><span class="comment">#可以自定义名字，如果不自定义名字，默认为id_rsa.pub，我这里为id_rsa.itjason.com</span></span><br></pre></td></tr></table></figure>
<h4 id="找到刚刚生成的文件，放到服务器中"><a href="#找到刚刚生成的文件，放到服务器中" class="headerlink" title="找到刚刚生成的文件，放到服务器中"></a>找到刚刚生成的文件，放到服务器中</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#此命令在服务器中执行（权限为root）</span></span><br><span class="line"><span class="comment">#这一步必须先把pub文件上传到服务器</span></span><br><span class="line">cat id_rsa.itjason.com.pub &gt;&gt; /home/git/.ssh/authorized_keys</span><br><span class="line"><span class="comment">#注意上面的id.~.pub文件，跟你自己的用户名相关，不要和我的雷同</span></span><br></pre></td></tr></table></figure>
<h4 id="本地git-bash，执行如下命令"><a href="#本地git-bash，执行如下命令" class="headerlink" title="本地git bash，执行如下命令"></a>本地git bash，执行如下命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#serverIP代表你的服务器的IP地址</span></span><br><span class="line">git <span class="built_in">clone</span> git@serverIP:/var/git/itjason.git</span><br><span class="line"><span class="comment">#如果执行以上命令报错误（git-upload-pack）执行下面的命令：</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/git/bin/git-upload-pack /usr/bin/git-upload-pack</span><br></pre></td></tr></table></figure>
<h4 id="服务器端设置用户"><a href="#服务器端设置用户" class="headerlink" title="服务器端设置用户"></a>服务器端设置用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config [--global] user.email <span class="string">'itjason.com@gmail.com'</span> <span class="comment">#注意方括号内容可以省略</span></span><br><span class="line">git config [--global] user.name <span class="string">'jason'</span> <span class="comment">#注意方括号内容可以省略</span></span><br></pre></td></tr></table></figure>
<h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加权限</span></span><br><span class="line">chown -R git:git .ssh</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置,启用ssh公钥认证</span></span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>代码托管</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用xpath解析xml小记</title>
    <url>/2017/09/06/dom4jxpathparsexml/</url>
    <content><![CDATA[<p>xpath是一门在xml文档中查找信息的语言。xpath用于在XML文档中通过元素和属性进行导航。它的返回值可能是节点，节点集合，文本，以及节点和文本的混合等。因为最近发现处理返回数据如果是json的比较麻烦。特意留意了一下xml，发现了比json处理起来方便多了。</p>
<a id="more"></a>
<h3 id="前期学习"><a href="#前期学习" class="headerlink" title="前期学习"></a>前期学习</h3><p>XML学习地址：<a href="http://www.runoob.com/xml/xml-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/xml/xml-tutorial.html</a><br>xpath基本语法学习地址：<a href="http://www.runoob.com/xpath/xpath-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/xpath/xpath-tutorial.html</a></p>
<h3 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h3><ul>
<li><p>所需的jar包：</p>
<ul>
<li>dom4j（地址：<a href="http://www.dom4j.org）" target="_blank" rel="noopener">http://www.dom4j.org）</a></li>
<li>jaxen（地址：<a href="http://jaxen.org/）" target="_blank" rel="noopener">http://jaxen.org/）</a></li>
</ul>
</li>
<li><p>如果使用maven管理jar包增加如下依赖即可</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">contactList</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contact</span> <span class="attr">id</span>=<span class="string">"001"</span> <span class="attr">class</span>=<span class="string">"style"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phone</span>&gt;</span>134222223333<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>zhangsan@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qq</span>&gt;</span>432221111<span class="tag">&lt;/<span class="name">qq</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contact</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contact</span> <span class="attr">id</span>=<span class="string">"002"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phone</span>&gt;</span>134222225555<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>lisi@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qq</span>&gt;</span>432222222<span class="tag">&lt;/<span class="name">qq</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contact</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contactTwo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>32<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phone</span>&gt;</span>465431341<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">emali</span>&gt;</span>af@qq.com<span class="tag">&lt;/<span class="name">emali</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qq</span>&gt;</span>46164694<span class="tag">&lt;/<span class="name">qq</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contactTwo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span>其他用途<span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contactList</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Xpath理论篇"><a href="#Xpath理论篇" class="headerlink" title="Xpath理论篇"></a>Xpath理论篇</h3><h4 id="绝对路径（-）"><a href="#绝对路径（-）" class="headerlink" title="绝对路径（/）"></a>绝对路径（/）</h4><p>含义：表示从xml文件的根位置开始或子元素（一个层次结构）<br>对于上面的Xml文件的绝对路径举例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;contactList</span><br><span class="line">&#x2F;contactList&#x2F;contact</span><br></pre></td></tr></table></figure>
<h4 id="相对路径（-）"><a href="#相对路径（-）" class="headerlink" title="相对路径（//）"></a>相对路径（//）</h4><p>含义：表示不分任何层次结构的选择元素<br>对于上面的Xml文件的相对路径举例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;contact&#x2F;name</span><br><span class="line">&#x2F;&#x2F;name</span><br></pre></td></tr></table></figure>
<h4 id="通配符（-）"><a href="#通配符（-）" class="headerlink" title="通配符（*）"></a>通配符（*）</h4><p>含义：表示匹配所有元素<br>对于上面的Xml文件的通配符使用举例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取根标签contactList下的所有子标签</span><br><span class="line">&#x2F;contactList&#x2F;*</span><br><span class="line">获取根标签contactList下的所有标签（不分层次结构）</span><br><span class="line">&#x2F;contactList&#x2F;&#x2F;*</span><br></pre></td></tr></table></figure>
<h4 id="条件（-）"><a href="#条件（-）" class="headerlink" title="条件（[]）"></a>条件（[]）</h4><p>含义：表示选择什么条件下的元素<br>对于上面的Xml文件的条件使用举例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">带有id属性的contact标签</span><br><span class="line">&#x2F;&#x2F;contact&#x2F;[@id]</span><br><span class="line">获取任意个contact标签（这里表示获取第二个）</span><br><span class="line">&#x2F;&#x2F;contact&#x2F;[2]</span><br><span class="line">获取最后一个contact标签</span><br><span class="line">&#x2F;&#x2F;contact&#x2F;[last()]</span><br></pre></td></tr></table></figure>
<h4 id="属性（-）"><a href="#属性（-）" class="headerlink" title="属性（@）"></a>属性（@）</h4><p>含义：表示选择某个属性节点<br>对于上面Xml文件的属性使用举例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择属性名为id的节点</span><br><span class="line">&#x2F;&#x2F;@id</span><br><span class="line">选择不包含id属性名的节点</span><br><span class="line">&#x2F;&#x2F;contact[not(@id)]</span><br><span class="line">选择id属性名具体值的节点</span><br><span class="line">&#x2F;&#x2F;contact[@id &#x3D; &#39;001&#39;]</span><br><span class="line">选择满足多属性的节点</span><br><span class="line">&#x2F;&#x2F;contact[@id &#x3D; &#39;001&#39; and @name &#x3D; &#39;zhangsan&#39;]</span><br></pre></td></tr></table></figure>
<h4 id="文本内容（text-）"><a href="#文本内容（text-）" class="headerlink" title="文本内容（text()）"></a>文本内容（text()）</h4><p>含义：表示选择标签中的文本内容<br>对于上面Xml文件的文本内容获取使用举例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取标签中的文本</span><br><span class="line">&#x2F;&#x2F;contact&#x2F;text()</span><br><span class="line">获取特定的文本标签</span><br><span class="line">&#x2F;&#x2F;contact&#x2F;name[text() &#x3D; &#39;张三&#39;]</span><br></pre></td></tr></table></figure>
<h3 id="Java中使用Xpath的两个方法"><a href="#Java中使用Xpath的两个方法" class="headerlink" title="Java中使用Xpath的两个方法"></a>Java中使用Xpath的两个方法</h3><h4 id="selectNode-查询多个节点对象"><a href="#selectNode-查询多个节点对象" class="headerlink" title="selectNode()查询多个节点对象"></a>selectNode()查询多个节点对象</h4><p>函数原型为：<br><em>List&lt;Node&gt; selectNode(“xpath表达式”);</em><br>关键的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Document doc = <span class="keyword">new</span> SAXReader().read(<span class="keyword">new</span> File(<span class="string">"./src/contact.xml"</span>));</span><br><span class="line"><span class="comment">//定义xpath语法</span></span><br><span class="line">String xpath = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">List&lt;Node&gt; list = doc.selectNode(xpath);</span><br><span class="line"><span class="keyword">for</span>(Node node : list)&#123;</span><br><span class="line">  System.out.println(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="selectSingleNode-查询单个节点对象"><a href="#selectSingleNode-查询单个节点对象" class="headerlink" title="selectSingleNode()查询单个节点对象"></a>selectSingleNode()查询单个节点对象</h4><p>函数的原型为：<br><em>Node selectSingleNode(“xpath表达式”);</em><br>关键的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Document doc = <span class="keyword">new</span> SAXReader().read(<span class="keyword">new</span> File(<span class="string">"./src/contact.xml"</span>));</span><br><span class="line"><span class="comment">//定义xpath语法</span></span><br><span class="line">String xpath = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">Element contactElem =    (Element)doc.selectSingleNode(xpath);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>dom4j</tag>
        <tag>xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC框架初试探</title>
    <url>/2017/08/27/springmvc-1/</url>
    <content><![CDATA[<h3 id="框架介绍"><a href="#框架介绍" class="headerlink" title="框架介绍"></a>框架介绍</h3><p>Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架，即使用了MVC框架模式的思想，将Web层进行职责解耦，基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们快速开发</p>
<a id="more"></a>
<h3 id="框架优点"><a href="#框架优点" class="headerlink" title="框架优点"></a>框架优点</h3><p>1.设计层次结构清晰<br>2.降低了各个模块之间的耦合性<br>3.提高代码的复用性</p>
<h3 id="框架原理图分析"><a href="#框架原理图分析" class="headerlink" title="框架原理图分析"></a>框架原理图分析</h3><p><img src="/" class="lazyload" data-src="/images/springmvc_1.jpg"  alt="原理分析"></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>框架官方：<a href="http://projects.spring.io/spring-framework/" target="_blank" rel="noopener">http://projects.spring.io/spring-framework/</a><br>框架问答：<a href="https://docs.spring.io/spring/docs/current/javadoc-api/" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/javadoc-api/</a><br>当前官方的版本为：4.3.10<br>本文的环境基于：最新版<em>4.3.10</em>搭建 + Maven + idea2017.2x64<br><img src="/" class="lazyload" data-src="/images/springmvc_step1.png"  alt="搭建步骤一"><br><img src="/" class="lazyload" data-src="/images/springmvc_step2.png"  alt="搭建步骤二"><br><img src="/" class="lazyload" data-src="/images/springmvc_step3.png"  alt="搭建步骤三"><br><img src="/" class="lazyload" data-src="/images/springmvc_step4.png"  alt="搭建步骤四"><br><img src="/" class="lazyload" data-src="/images/springmvc_step5.png"  alt="搭建步骤五"></p>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>0.打开maven的pom文件新增如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--核心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--webmvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>1.打开web.xml文件增加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>MySpringMvcDemo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DefaultServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DefaultServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.在main目录下新增一个java文件用于存放java源文件，并将java目录mark为Sources Root<br>3.在java目录下新建包：“com.itjason.controller”<br>4.把resource目录mark为Resources Root，在resource目录下新增springmvc.xml文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itjason.*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5.在controller包下面新建一个类：HelloSpringMvcController.java，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itjason.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/it"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringMvcController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6.在WEB-INF下新建jsp目录，在jsp目录下新增hello.jsp文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello Itjason!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>7.新建一个tomcat服务器，并运行项目<br>浏览器访问地址：<a href="http://localhost:8080/it/hello" target="_blank" rel="noopener">http://localhost:8080/it/hello</a><br>显示的结果如下：<br><img src="/" class="lazyload" data-src="/images/springmvc_view.png"  alt="结果"></p>
<h3 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h3><p>中途出了很多问题。有时候因为xsd文件不能正确引导，导致的xml错误<br>遂发现官网的xsd提供的地址：<a href="http://www.springframework.org/schema/" target="_blank" rel="noopener">http://www.springframework.org/schema/</a><br>文中如果有错误，欢迎给予指正</p>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>Springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-装饰模式</title>
    <url>/2017/08/11/decorator/</url>
    <content><![CDATA[<p>装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p>
<a id="more"></a>
<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例，其关系可以表示为如下图：<br><img src="/" class="lazyload" data-src="/images/decorator.jpg"  alt="关系图"></p>
<h3 id="代码阐述"><a href="#代码阐述" class="headerlink" title="代码阐述"></a>代码阐述</h3><p>Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能。代码如下：</p>
<ul>
<li>接口代码的实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Source实现接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Source Method"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Decorator实现接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Sourceable source;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Sourceable source)</span></span>&#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">      <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Decorator before"</span>);</span><br><span class="line">      source.method();</span><br><span class="line">      System.out.println(<span class="string">"Decorator after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDecorator</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Sourceable source = <span class="keyword">new</span> Source();</span><br><span class="line">    Sourceable decoratorSource = <span class="keyword">new</span> Decorator(source);</span><br><span class="line">    decoratorSource.method();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Decorator before</span><br><span class="line">Source Method</span><br><span class="line">Decorator after</span><br></pre></td></tr></table></figure>

<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>需要扩展一个类的功能</li>
<li>动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态删）</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>产生过多相似的对象，不易排除</li>
</ul>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>装饰模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-单例模式</title>
    <url>/2017/08/07/singleton/</url>
    <content><![CDATA[<p>单列对象（Singleton）是一种常用的设计模式，在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。</p>
<a id="more"></a>
<h3 id="单例模式的好处"><a href="#单例模式的好处" class="headerlink" title="单例模式的好处"></a>单例模式的好处</h3><ol>
<li>某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销</li>
<li>省去了<code>new</code> 操作符，降低了系统内存的使用频率，减轻<code>GC</code>压力</li>
<li>有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。就像一个军队出现了多个司令员同时指挥，肯定会乱成一团，所以使用单例模式，才能保证核心交易服务器独立控制整个流程</li>
</ol>
<h3 id="单例模式如何实现？"><a href="#单例模式如何实现？" class="headerlink" title="单例模式如何实现？"></a>单例模式如何实现？</h3><p>编写简单的单例类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="comment">//私有静态实例，防止被引用，此处赋值null，目的是实现延迟加载</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">//私有构造方法，防止被实例化</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="comment">//静态工程方法，创建实例，并返回当前实例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果该对象被用于序列化，可以保证对象在序列化前后保持一致</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>这个类可以满足基本需要，但是，像这样毫无线程安全保护的类，为什么说线程安全呢，因为实例不一定会仅仅存在一个，因为在多线程中，共享一个实例是会导致线程安全的，那么我们该如何解决呢？首先会想到的是对<code>getInstance</code>方法加<code>synchronized</code>关键字，修改之后如下：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>当使用<code>synchronized</code>关键字锁住这个对象，这样的用法，会在性能上有所下降，因为每次调用<code>getInstance</code>方法，都需要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就需要了。所以我们还需要继续改进，修改之后如下：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(instance)&#123;</span><br><span class="line">      <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>看似似乎解决了上面的问题，将<code>synchronized</code>关键字放在内部，也就是说当调用的时候是不要加锁的，只有在<code>instance</code>为<code>null</code>，并创建对象的时候才需要加锁，性能有一定提升，但是，这样的情况，还是有可能出现问题的，具体的可以从以下情况中分析：</em><br>在java指令中创建对象和赋值操作是分开进行的，也就是说<code>instance=new Singleton();</code>语句分两步执行的。但是<code>JVM</code>并不保证这两个操作的先后顺序，也就是说有可能<code>JVM</code>会为新的<code>Singleton</code>实例分配空间，然后直接赋值给<code>instance</code>成员，然后再去初始化这个<code>Singleton</code>实例，这样就有可能出错了，我们进一步使用两个线程分析<br>两个线程：<code>Thread-A</code>和<code>Thread-B</code></p>
<ol>
<li>当两个线程同时进入了第一个if判断</li>
<li><code>Thread-A</code>首先进入<code>synchronized</code>块，由于<code>instance</code>为<code>null</code>，所以它执行<code>instance=new Singleton();</code></li>
<li>由于<code>JVM</code>内部的优化机制，<code>JVM</code>先画出了一些分配给<code>Singleton</code>实例的空白内存，并赋值给<code>instance</code>成员（这个时候<code>JVM</code>并没有开始初始化这个实例），然后<code>Thread-A</code>离开了<code>synchronized</code>块</li>
<li><code>Thread-B</code>进入<code>synchronized</code>块，由于<code>instance</code>此时不是<code>null</code>，因此它马上离开了<code>synchronized</code>块并将结果返回给调用方法的程序</li>
<li>此时<code>Thread-B</code>打算使用<code>Singleton</code>实例，却发现它并没有初始化，于是就会发生空指针异常</li>
</ol>
<p><em>综合上述分析：程序还是有可能发生错误，其实程序在运行过程中是很复杂的，从这点就可以看出，尤其是在写多线程环境下的程序更有难度，有挑战性。我们需要对程序进一步优化：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> calss SingletonFactory&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> SingletonFactory.instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="较好的单例程序"><a href="#较好的单例程序" class="headerlink" title="较好的单例程序"></a>较好的单例程序</h3><p>经过以上的所有综合分析。一个比较好的单例模式程序如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="comment">//私有构造方法，防止类被实例化</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="comment">//使用一个内部类来维护单例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取实例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonFactory.instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果该对象被用于序列化，可以保证对象在序列化前后保持一致</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="单例模式总结"><a href="#单例模式总结" class="headerlink" title="单例模式总结"></a>单例模式总结</h3><ol>
<li>单例模式理解起来简单，但是具体实现起来还是有一定的难度。</li>
<li>synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。</li>
</ol>
<h3 id="疑问分析"><a href="#疑问分析" class="headerlink" title="疑问分析"></a>疑问分析</h3><p>采用类的静态方法，实现单例模式的效果，也是可行的，此处二者有什么不同？</p>
<ol>
<li>首先，静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不允许有<code>static</code>修饰的方法，所以即使实现了也是非静态的）</li>
<li>其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些类比较庞大，所以延迟加载有助于提升性能。</li>
<li>再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是<code>static</code>，无法被覆写。</li>
</ol>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二者的区别，但是，从另一方面讲，我们上面最后实现的那个单例模式，内部就是用一个静态类来实现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就出完美的解决方案，就像<code>HashMap</code>采用数组+链表来实现一样，其实生活中很多事情都是这样，单用不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好的解决问题！</p>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>一步一步开发自己的PHP的MVC框架</title>
    <url>/2017/07/04/diy-php-mvc/</url>
    <content><![CDATA[<p>网络上有大量优秀的MVC框架可供使用，本文章并不是为了开发一个全面的、终极的MVC框架解决方案。我们将它看作是一个很好的从内部学习PHP的机会。在文章中，你将学习PHP面向对象编程和MVC设计模式，并学习到开发中的一些注意事项。更重要的是，通过自制MVC框架，每个人都可以完全控制自己的框架，将你的想法融入到你开发的框架中。虽然不一定是最好的，但是你可以按照自己的方式开发各种功能。那么我们该如何开发自己的MVC框架呢？</p>
<a id="more"></a>
<h3 id="先明白MVC是什么"><a href="#先明白MVC是什么" class="headerlink" title="先明白MVC是什么?"></a>先明白MVC是什么?</h3><p><code>MVC模式</code>（Model-View-Controller）是软件工程中的一种<code>软件架构</code>模式。<br><strong>MVC三个基本部分</strong><br>1.模型（Model）<br>2.视图（View）<br>3.控制器（Controller）<br>PHP中MVC模式也称Web MVC，MVC的目的是实现一种动态的程序设计，便于后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。除此之外，此模式通过对复杂度的简化，使程序结构更加直观。<br><strong>MVC各部分的职能</strong><br><code>模型Model</code> 管理大部分的业务逻辑和所有的数据库逻辑。模型提供了连接和操作数据库的抽象层。<br><code>控制器Controller</code> 负责响应用户请求、准备数据，以及决定如何展示数据。<br><code>视图View</code> 负责渲染数据，通过HTML方式呈现给用户。<br><strong>下图动态展示MVC工作流程</strong><br><img src="/" class="lazyload" data-src="/images/web_mvc.gif"  alt=""><br><strong><code>Controller截获用户发出的请求</code></strong>-&gt;<strong><code>Controller调用Model完成状态的读写操作</code></strong>-&gt;<strong><code>Controller把数据传递给View</code></strong>-&gt;<strong><code>View渲染最终结果并呈献给用户</code></strong></p>
<h3 id="开始开发自己的MVC框架"><a href="#开始开发自己的MVC框架" class="headerlink" title="开始开发自己的MVC框架"></a>开始开发自己的MVC框架</h3><h4 id="项目结构确定"><a href="#项目结构确定" class="headerlink" title="项目结构确定"></a>项目结构确定</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">project  WEB部署目录</span><br><span class="line">├─application           应用目录</span><br><span class="line">│  ├─controllers        控制器目录</span><br><span class="line">│  ├─models             模块目录</span><br><span class="line">│  ├─views              视图目录</span><br><span class="line">├─config                配置文件目录</span><br><span class="line">├─coreframe             框架核心目录</span><br><span class="line">├─static                静态文件目录</span><br><span class="line">├─index.php             单入口文件</span><br></pre></td></tr></table></figure>
<h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><p>1.MySQL的表名需小写或小写加下划线，如：item，sys_orders。<br>2.模块名（Models）需用大驼峰命名法，即首字母大写，并在名称后添加Model，如：ItemModel，CarModel。<br>3.控制器（Controllers）需用大驼峰命名法，即首字母大写，并在名称后添加Controller，如：ItemController，CarController。<br>3.方法名（Action）需用小驼峰命名法，即首字母小写，如：index，indexPost。<br>4.视图（Views）部署结构为控制器名/行为名，如：item/view.php，car/buy.php。<br><code>上述规则是为了程序能更好地相互调用</code></p>
<h4 id="重定向-RESTful"><a href="#重定向-RESTful" class="headerlink" title="重定向(RESTful)"></a>重定向(RESTful)</h4><p>重定向的目的有两个：<br>1.设置根目录为project所在位置<br>2.将所有请求都发送给index.php(单入口)文件<br>如果是<code>Apache</code>服务器，在project目录下新建一个<code>.htaccess</code> 文件，内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">    # 打开Rerite功能</span><br><span class="line">    RewriteEngine On</span><br><span class="line"></span><br><span class="line">    # 如果请求的是真实存在的文件或目录，直接访问</span><br><span class="line">    RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">    RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line"></span><br><span class="line">    # 如果访问的文件或目录不是真事存在，分发请求至 index.php</span><br><span class="line">    RewriteRule . index.php</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure>
<p>如果是<code>Nginx</code>服务器，修改配置文件，在<code>server</code>块中加入如下的重定向：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    # 重新向所有非真是存在的请求到index.php</span><br><span class="line">    try_files $uri $uri&#x2F; &#x2F;index.php$args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重定向(RESTful)主要原因是：<br>1.静态文件能直接访问。如果文件或者目录真实存在，则直接访问存在的文件/目录。比如，静态文件static/css/main.css真实存在，就可以直接访问它。<br>2.程序有单一的入口。这种情况是请求地址不是真实存在的文件或目录，这样请求就会传到 index.php 上。例如，访问地址：localhost/item/view/1，在文件系统中并不存在这样的文件或目录。那么，Apache或Nginx服务器会把请求发给index.php，并且把域名之后的字符串赋值给REQUEST_URI变量。这样在PHP中用$_SERVER[‘REQUEST_URI’]就能拿到/item/view/1；<br>3.可以用来生成美化的URL，利于SEO。</p>
<h4 id="单入口文件index-php"><a href="#单入口文件index-php" class="headerlink" title="单入口文件index.php"></a>单入口文件index.php</h4><p>在项目的根目录下新建index.php单入口文件，文件的内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 应用目录为当前目录</span></span><br><span class="line">define(<span class="string">'APP_PATH'</span>, <span class="keyword">__DIR__</span> . <span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启调试模式</span></span><br><span class="line">define(<span class="string">'APP_DEBUG'</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载框架文件</span></span><br><span class="line"><span class="keyword">require</span>(APP_PATH . <span class="string">'coreframe/CoreFrame.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载配置文件</span></span><br><span class="line">$config = <span class="keyword">require</span>(APP_PATH . <span class="string">'config/config.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化框架类</span></span><br><span class="line">(<span class="keyword">new</span> CoreFrame($config))-&gt;run();</span><br></pre></td></tr></table></figure>
<p>注意，上面的PHP代码中，并没有添加PHP结束符号?&gt;，这么做的主要原因是：<br>1.对于只有 PHP 代码的文件，最好没有结束标志?&gt;；<br>2.PHP自身并不需要结束符号，不加结束符让程序更加安全，很大程度防止了末尾被注入额外的内容。</p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在入口文件中，我们加载了config.php文件的内容，那它有何作用呢？从名称不难看出，它的作用是保存一些常用配置。作用是定义数据库连接参数参数，以及配置默认控制器名和操作名。<br>在config目录下新建config.php文件，文件内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库配置</span></span><br><span class="line">define(<span class="string">'DB_NAME'</span>, <span class="string">'pingshop'</span>);</span><br><span class="line">define(<span class="string">'DB_USER'</span>, <span class="string">'root'</span>);</span><br><span class="line">define(<span class="string">'DB_PASSWORD'</span>, <span class="string">'root'</span>);</span><br><span class="line">define(<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认控制器和操作名</span></span><br><span class="line">$config[<span class="string">'defaultController'</span>] = <span class="string">'Item'</span>;</span><br><span class="line">$config[<span class="string">'defaultAction'</span>] = <span class="string">'index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $config;</span><br></pre></td></tr></table></figure>
<p>单入口中的$config变量接收到配置参数后，再传给框架的核心类，也就是CoreFrame类。</p>
<h4 id="框架核心类CoreFrame"><a href="#框架核心类CoreFrame" class="headerlink" title="框架核心类CoreFrame"></a>框架核心类CoreFrame</h4><p>单入口文件对框架类做了两步操作：<br>1.<strong>实例化：</strong>实例化操作接受$config参数配置，并保存到类属性中。<br>2.<strong>调用run()方法：</strong>run()方法则调用用类自身方法，完成：自动加载类文件、监测开发环境、过滤敏感字符、移除全局变量的老用法、和处理路由。<br>在coreframe目录下新建CoreFrame.php文件，内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 框架核心</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoreFrame</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $_config = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_config = $config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行程序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        spl_autoload_register(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="string">'loadClass'</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setReporting();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;removeMagicQuotes();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;unregisterGlobals();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setDbConfig();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;route();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路由处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">route</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $controllerName = <span class="keyword">$this</span>-&gt;_config[<span class="string">'defaultController'</span>];</span><br><span class="line">        $actionName = <span class="keyword">$this</span>-&gt;_config[<span class="string">'defaultAction'</span>];</span><br><span class="line">        $param = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">        $url = $_SERVER[<span class="string">'REQUEST_URI'</span>];</span><br><span class="line">        <span class="comment">// 清除?之后的内容</span></span><br><span class="line">        $position = strpos($url, <span class="string">'?'</span>);</span><br><span class="line">        $url = $position === <span class="keyword">false</span> ? $url : substr($url, <span class="number">0</span>, $position);</span><br><span class="line">        <span class="comment">// 删除前后的“/”</span></span><br><span class="line">        $url = trim($url, <span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($url) &#123;</span><br><span class="line">            <span class="comment">// 使用“/”分割字符串，并保存在数组中</span></span><br><span class="line">            $urlArray = explode(<span class="string">'/'</span>, $url);</span><br><span class="line">            <span class="comment">// 删除空的数组元素</span></span><br><span class="line">            $urlArray = array_filter($urlArray);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取控制器名</span></span><br><span class="line">            $controllerName = ucfirst($urlArray[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取动作名</span></span><br><span class="line">            array_shift($urlArray);</span><br><span class="line">            $actionName = $urlArray ? $urlArray[<span class="number">0</span>] : $actionName;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取URL参数</span></span><br><span class="line">            array_shift($urlArray);</span><br><span class="line">            $param = $urlArray ? $urlArray : <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断控制器和操作是否存在</span></span><br><span class="line">        $controller = $controllerName . <span class="string">'Controller'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!class_exists($controller)) &#123;</span><br><span class="line">            <span class="keyword">exit</span>($controller . <span class="string">'控制器不存在'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!method_exists($controller, $actionName)) &#123;</span><br><span class="line">            <span class="keyword">exit</span>($actionName . <span class="string">'方法不存在'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果控制器和操作名存在，则实例化控制器，因为控制器对象里面</span></span><br><span class="line">        <span class="comment">// 还会用到控制器名和操作名，所以实例化的时候把他们俩的名称也</span></span><br><span class="line">        <span class="comment">// 传进去。结合Controller基类一起看</span></span><br><span class="line">        $dispatch = <span class="keyword">new</span> $controller($controllerName, $actionName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// $dispatch保存控制器实例化后的对象，我们就可以调用它的方法，</span></span><br><span class="line">        <span class="comment">// 也可以像方法中传入参数，以下等同于：$dispatch-&gt;$actionName($param)</span></span><br><span class="line">        call_user_func_array(<span class="keyword">array</span>($dispatch, $actionName), $param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测开发环境</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setReporting</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (APP_DEBUG === <span class="keyword">true</span>) &#123;</span><br><span class="line">            error_reporting(E_ALL);</span><br><span class="line">            ini_set(<span class="string">'display_errors'</span>,<span class="string">'On'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            error_reporting(E_ALL);</span><br><span class="line">            ini_set(<span class="string">'display_errors'</span>,<span class="string">'Off'</span>);</span><br><span class="line">            ini_set(<span class="string">'log_errors'</span>, <span class="string">'On'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除敏感字符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stripSlashesDeep</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $value = is_array($value) ? array_map(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="string">'stripSlashesDeep'</span>), $value) : stripslashes($value);</span><br><span class="line">        <span class="keyword">return</span> $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测敏感字符并删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeMagicQuotes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (get_magic_quotes_gpc()) &#123;</span><br><span class="line">            $_GET = <span class="keyword">isset</span>($_GET) ? <span class="keyword">$this</span>-&gt;stripSlashesDeep($_GET ) : <span class="string">''</span>;</span><br><span class="line">            $_POST = <span class="keyword">isset</span>($_POST) ? <span class="keyword">$this</span>-&gt;stripSlashesDeep($_POST ) : <span class="string">''</span>;</span><br><span class="line">            $_COOKIE = <span class="keyword">isset</span>($_COOKIE) ? <span class="keyword">$this</span>-&gt;stripSlashesDeep($_COOKIE) : <span class="string">''</span>;</span><br><span class="line">            $_SESSION = <span class="keyword">isset</span>($_SESSION) ? <span class="keyword">$this</span>-&gt;stripSlashesDeep($_SESSION) : <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测自定义全局变量并移除。因为 register_globals 已经弃用，如果</span></span><br><span class="line">    <span class="comment">// 已经弃用的 register_globals 指令被设置为 on，那么局部变量也将</span></span><br><span class="line">    <span class="comment">// 在脚本的全局作用域中可用。 例如， $_POST['foo'] 也将以 $foo 的</span></span><br><span class="line">    <span class="comment">// 形式存在，这样写是不好的实现，会影响代码中的其他变量。 相关信息，</span></span><br><span class="line">    <span class="comment">// 参考: http://php.net/manual/zh/faq.using.php#faq.register-globals</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unregisterGlobals</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ini_get(<span class="string">'register_globals'</span>)) &#123;</span><br><span class="line">            $array = <span class="keyword">array</span>(<span class="string">'_SESSION'</span>, <span class="string">'_POST'</span>, <span class="string">'_GET'</span>, <span class="string">'_COOKIE'</span>, <span class="string">'_REQUEST'</span>, <span class="string">'_SERVER'</span>, <span class="string">'_ENV'</span>, <span class="string">'_FILES'</span>);</span><br><span class="line">            <span class="keyword">foreach</span> ($array <span class="keyword">as</span> $value) &#123;</span><br><span class="line">                <span class="keyword">foreach</span> ($GLOBALS[$value] <span class="keyword">as</span> $key =&gt; $var) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ($var === $GLOBALS[$key]) &#123;</span><br><span class="line">                        <span class="keyword">unset</span>($GLOBALS[$key]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置数据库信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setDbConfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_config[<span class="string">'db'</span>]) &#123;</span><br><span class="line">            Model::$dbConfig = <span class="keyword">$this</span>-&gt;_config[<span class="string">'db'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动加载控制器和模型类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClass</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $frameworks = <span class="keyword">__DIR__</span> . <span class="string">'/'</span> . $class . <span class="string">'.php'</span>;</span><br><span class="line">        $controllers = APP_PATH . <span class="string">'application/controllers/'</span> . $class . <span class="string">'.php'</span>;</span><br><span class="line">        $models = APP_PATH . <span class="string">'application/models/'</span> . $class . <span class="string">'.php'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file_exists($frameworks)) &#123;</span><br><span class="line">            <span class="comment">// 加载框架核心类</span></span><br><span class="line">            <span class="keyword">include</span> $frameworks;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (file_exists($controllers)) &#123;</span><br><span class="line">            <span class="comment">// 加载应用控制器类</span></span><br><span class="line">            <span class="keyword">include</span> $controllers;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (file_exists($models)) &#123;</span><br><span class="line">            <span class="comment">//加载应用模型类</span></span><br><span class="line">            <span class="keyword">include</span> $models;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 错误代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>核心框架中的路由方法</strong><br>作用是：<code>截取URL，并解析出控制器名、方法名和URL参数。</code><br>因为我们上面做了路径访问格式，所以现在的访问路径如下格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:80&#x2F;item&#x2F;info&#x2F;2&#x2F;detail</span><br></pre></td></tr></table></figure>
<p>当浏览器访问上面的URL，route()从全局变量 $_SERVER[‘REQUEST_URI’]中获取到字符串/item/info/2/detail。<br>对于上面的url经过route()之后：</p>
<ul>
<li>Controller名就是：item</li>
<li>Action名就是：info</li>
<li>URL参数就是：array(2,detail)<br><code>分割完成后，再实例化控制器：ItemController，并调用其中的info方法</code></li>
</ul>
<h4 id="Controller基类"><a href="#Controller基类" class="headerlink" title="Controller基类"></a>Controller基类</h4><p>新建控制器基类，文件名 Controller.class.php，功能就是总调度，内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $_controller;</span><br><span class="line">    <span class="keyword">protected</span> $_action;</span><br><span class="line">    <span class="keyword">protected</span> $_view;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，初始化属性，并实例化对应模型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($controller, $action)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_controller = $controller;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_action = $action;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_view = <span class="keyword">new</span> View($controller, $action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">($name, $value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_view-&gt;assign($name, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染视图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_view-&gt;render();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Controller 类用assign()方法实现把变量保存到View对象中。这样，在调用$this-&gt; render() 后视图文件就能显示这些变量。</p>
<h4 id="Model基类"><a href="#Model基类" class="headerlink" title="Model基类"></a>Model基类</h4><p>新建模型基类，继承自数据库操作类Sql类（因为数据库操作比较复杂）。模型基类文件名为 Model.class.php，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 模型基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span> <span class="keyword">extends</span> <span class="title">Sql</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $_model;</span><br><span class="line">    <span class="keyword">protected</span> $_table;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $dbConfig = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 连接数据库</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;connect(<span class="keyword">self</span>::$dbConfig[<span class="string">'host'</span>], <span class="keyword">self</span>::$dbConfig[<span class="string">'username'</span>], <span class="keyword">self</span>::$dbConfig[<span class="string">'password'</span>],</span><br><span class="line">            <span class="keyword">self</span>::$dbConfig[<span class="string">'dbname'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据库表名</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_table) &#123;</span><br><span class="line">            <span class="comment">// 获取模型类名称</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_model = get_class(<span class="keyword">$this</span>);</span><br><span class="line">            <span class="comment">// 删除类名最后的 Model 字符</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_model = substr(<span class="keyword">$this</span>-&gt;_model, <span class="number">0</span>, <span class="number">-5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 数据库表名与类名一致</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_table = strtolower(<span class="keyword">$this</span>-&gt;_model);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>建立一个数据库基类 Sql.class.php，其目的是针对数据库的增删改查等公共方法的定义，代码如下：</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 数据库基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sql</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $_dbHandle;</span><br><span class="line">    <span class="keyword">protected</span> $_result;</span><br><span class="line">    <span class="keyword">private</span> $filter = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接数据库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($host, $username, $password, $dbname)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $dsn = sprintf(<span class="string">"mysql:host=%s;dbname=%s;charset=utf8"</span>, $host, $dbname);</span><br><span class="line">            $option = <span class="keyword">array</span>(PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dbHandle = <span class="keyword">new</span> PDO($dsn, $username, $password, $option);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">'错误: '</span> . $e-&gt;getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询条件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">where</span><span class="params">($where = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($where)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filter .= <span class="string">' WHERE '</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filter .= implode(<span class="string">' '</span>, $where);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序条件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">order</span><span class="params">($order = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($order)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filter .= <span class="string">' ORDER BY '</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filter .= implode(<span class="string">','</span>, $order);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">selectAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sql = sprintf(<span class="string">"select * from `%s` %s"</span>, <span class="keyword">$this</span>-&gt;_table, <span class="keyword">$this</span>-&gt;filter);</span><br><span class="line">        $sth = <span class="keyword">$this</span>-&gt;_dbHandle-&gt;prepare($sql);</span><br><span class="line">        $sth-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $sth-&gt;fetchAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据条件 (id) 查询</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sql = sprintf(<span class="string">"select * from `%s` where `id` = '%s'"</span>, <span class="keyword">$this</span>-&gt;_table, $id);</span><br><span class="line">        $sth = <span class="keyword">$this</span>-&gt;_dbHandle-&gt;prepare($sql);</span><br><span class="line">        $sth-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $sth-&gt;fetch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据条件 (id) 删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sql = sprintf(<span class="string">"delete from `%s` where `id` = '%s'"</span>, <span class="keyword">$this</span>-&gt;_table, $id);</span><br><span class="line">        $sth = <span class="keyword">$this</span>-&gt;_dbHandle-&gt;prepare($sql);</span><br><span class="line">        $sth-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $sth-&gt;rowCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义SQL查询，返回影响的行数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">($sql)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sth = <span class="keyword">$this</span>-&gt;_dbHandle-&gt;prepare($sql);</span><br><span class="line">        $sth-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $sth-&gt;rowCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sql = sprintf(<span class="string">"insert into `%s` %s"</span>, <span class="keyword">$this</span>-&gt;_table, <span class="keyword">$this</span>-&gt;formatInsert($data));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($id, $data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sql = sprintf(<span class="string">"update `%s` set %s where `id` = '%s'"</span>, <span class="keyword">$this</span>-&gt;_table, <span class="keyword">$this</span>-&gt;formatUpdate($data), $id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数组转换成插入格式的sql语句</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">formatInsert</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $fields = <span class="keyword">array</span>();</span><br><span class="line">        $values = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">            $fields[] = sprintf(<span class="string">"`%s`"</span>, $key);</span><br><span class="line">            $values[] = sprintf(<span class="string">"'%s'"</span>, $value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $field = implode(<span class="string">','</span>, $fields);</span><br><span class="line">        $value = implode(<span class="string">','</span>, $values);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sprintf(<span class="string">"(%s) values (%s)"</span>, $field, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数组转换成更新格式的sql语句</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">formatUpdate</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $fields = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">            $fields[] = sprintf(<span class="string">"`%s` = '%s'"</span>, $key, $value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> implode(<span class="string">','</span>, $fields);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>小提示：</strong><br>应该说，Sql.class.php 是框架的核心部分。为什么？<br>因为通过它，我们创建了一个 SQL 抽象层，可以大大减少了数据库的编程工作。<br>虽然 PDO 接口本来已经很简洁，但是抽象之后框架的可灵活性更高。<br>这里的数据库句柄$this-&gt;_dbHandle还能用单例模式返回，让数据读写更高效，这部分可自行实现。</p>
<h4 id="View基类"><a href="#View基类" class="headerlink" title="View基类"></a>View基类</h4><p>新建视图基类 View.class.php 内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 视图基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $variables = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">protected</span> $_controller;</span><br><span class="line">    <span class="keyword">protected</span> $_action;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($controller, $action)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_controller = strtolower($controller);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_action = strtolower($action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">($name, $value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;variables[$name] = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染显示</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($message=false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        extract(<span class="keyword">$this</span>-&gt;variables);</span><br><span class="line">        $defaultHeader = APP_PATH . <span class="string">'application/views/header.php'</span>;</span><br><span class="line">        $defaultFooter = APP_PATH . <span class="string">'application/views/footer.php'</span>;</span><br><span class="line"></span><br><span class="line">        $controllerHeader = APP_PATH . <span class="string">'application/views/'</span> . <span class="keyword">$this</span>-&gt;_controller . <span class="string">'/header.php'</span>;</span><br><span class="line">        $controllerFooter = APP_PATH . <span class="string">'application/views/'</span> . <span class="keyword">$this</span>-&gt;_controller . <span class="string">'/footer.php'</span>;</span><br><span class="line">        <span class="keyword">if</span>($message)&#123;</span><br><span class="line">            $controllerLayout = APP_PATH . <span class="string">'application/views/'</span> . <span class="keyword">$this</span>-&gt;_controller . <span class="string">'/message.php'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $controllerLayout = APP_PATH . <span class="string">'application/views/'</span> . <span class="keyword">$this</span>-&gt;_controller . <span class="string">'/'</span> . <span class="keyword">$this</span>-&gt;_action . <span class="string">'.php'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 页头文件</span></span><br><span class="line">        <span class="keyword">if</span> (file_exists($controllerHeader)) &#123;</span><br><span class="line">            <span class="keyword">include</span> ($controllerHeader);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">include</span> ($defaultHeader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">include</span> ($controllerLayout);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 页脚文件</span></span><br><span class="line">        <span class="keyword">if</span> (file_exists($controllerFooter)) &#123;</span><br><span class="line">            <span class="keyword">include</span> ($controllerFooter);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">include</span> ($defaultFooter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过以上所有的步骤，我们已经实现了一个简单的MVC框架了。那么我们该怎么使用它呢？</p>
<h3 id="使用自己的框架"><a href="#使用自己的框架" class="headerlink" title="使用自己的框架"></a>使用自己的框架</h3><h4 id="部署数据库（core）"><a href="#部署数据库（core）" class="headerlink" title="部署数据库（core）"></a>部署数据库（core）</h4><p>这里我比较喜欢SyBase公司的PowerDesigner设计数据表，然后再导出sql文件就可以了。当然你也可以手写sql语句建表。<br>本文因为只是作为简单使用。所以使用非常简单的数据表就可以了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`core`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"><span class="keyword">USE</span> <span class="string">`core`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`item`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">    <span class="string">`item_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`item`</span> <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'饮料'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`item`</span> <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">'辣条'</span>);</span><br></pre></td></tr></table></figure>
<h4 id="模型部署"><a href="#模型部署" class="headerlink" title="模型部署"></a>模型部署</h4><p>在 models 目录中创建一个 ItemModel.php 文件，内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ItemModel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemModel</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义当前模型操作的数据库表名称，</span></span><br><span class="line"><span class="comment">     * 如果不指定默认为类名称的小写字符串，</span></span><br><span class="line"><span class="comment">     * 这里就是 item 表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $_table = <span class="string">'item'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索功能，因为Sql父类里面没有现成的like搜索，</span></span><br><span class="line"><span class="comment">     * 所以需要自己写SQL语句，对数据库的操作应该都放</span></span><br><span class="line"><span class="comment">     * 在Model里面，然后提供给Controller直接调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $title string 查询的关键词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array 返回的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">search</span><span class="params">($keyword)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sql = <span class="string">"select * from `$this-&gt;_table` where `item_name` like '%$keyword%'"</span>;</span><br><span class="line">        $sth = <span class="keyword">$this</span>-&gt;_dbHandle-&gt;prepare($sql);</span><br><span class="line">        $sth-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $sth-&gt;fetchAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>小提示：</strong>因为 Item 模型继承了 Model基类，所以它拥有 Model 类的所有功能。</p>
<h4 id="部署控制器"><a href="#部署控制器" class="headerlink" title="部署控制器"></a>部署控制器</h4><p>在 controllers 目录下创建一个 ItemController.php 控制器，内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 首页方法，测试框架自定义DB查询</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $keyword = <span class="keyword">isset</span>($_GET[<span class="string">'keyword'</span>]) ? $_GET[<span class="string">'keyword'</span>] : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($keyword) &#123;</span><br><span class="line">            $items = (<span class="keyword">new</span> ItemModel())-&gt;search($keyword);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $items = (<span class="keyword">new</span> ItemModel)-&gt;selectAll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'title'</span>, <span class="string">'全部条目'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'keyword'</span>, $keyword);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'items'</span>, $items);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加记录，测试框架DB记录创建（Create）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $data[<span class="string">'item_name'</span>] = $_POST[<span class="string">'value'</span>];</span><br><span class="line">        $count = (<span class="keyword">new</span> ItemModel)-&gt;add($data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'message'</span>, <span class="string">'添加成功，点击返回'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作管理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manage</span><span class="params">($id = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $item = <span class="keyword">array</span>();</span><br><span class="line">        $postUrl = <span class="string">'/item/add'</span>;</span><br><span class="line">        <span class="keyword">if</span> ($id) &#123;</span><br><span class="line">            $item = (<span class="keyword">new</span> ItemModel)-&gt;select($id);</span><br><span class="line">            $postUrl = <span class="string">'/item/update'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'title'</span>, <span class="string">'管理条目'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'item'</span>, $item);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'postUrl'</span>, $postUrl);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新记录，测试框架DB记录更新（Update）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $data = <span class="keyword">array</span>(<span class="string">'id'</span> =&gt; $_POST[<span class="string">'id'</span>], <span class="string">'item_name'</span> =&gt; $_POST[<span class="string">'value'</span>]);</span><br><span class="line">        $count = (<span class="keyword">new</span> ItemModel)-&gt;update($data[<span class="string">'id'</span>], $data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'message'</span>, <span class="string">'更新成功，点击返回'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除记录，测试框架DB记录删除（Delete）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">($id = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $count = (<span class="keyword">new</span> ItemModel)-&gt;delete($id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'message'</span>, <span class="string">'删除成功，点击返回'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署视图"><a href="#部署视图" class="headerlink" title="部署视图"></a>部署视图</h4><p>在 views 目录下新建 header.php 和 footer.php 页头页脚模板<br><code>header.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $title <span class="meta">?&gt;</span>&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $title <span class="meta">?&gt;</span>&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<p><code>footer.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在 views下创建一个与之相关的目录item，在item创建以下几个视图文件，分别作用为增删改查的数据显示页面<br><code>index.php：作用为浏览所有的数据</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> value=<span class="string">"&lt;?php echo $keyword ?&gt;"</span> name=<span class="string">"keyword"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"搜索"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">"/item/manage"</span>&gt;新建&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;内容&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">foreach</span> ($items <span class="keyword">as</span> $item): <span class="meta">?&gt;</span></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $item[<span class="string">'id'</span>] <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $item[<span class="string">'item_name'</span>] <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;a href=<span class="string">"/item/manage/&lt;?php echo $item['id'] ?&gt;"</span>&gt;编辑&lt;/a&gt;</span><br><span class="line">                &lt;a href=<span class="string">"/item/delete/&lt;?php echo $item['id'] ?&gt;"</span>&gt;删除&lt;/a&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">endforeach</span> <span class="meta">?&gt;</span></span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p><code>manager.php：作用为管理数据</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"&lt;?php echo $postUrl; ?&gt;"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($item[<span class="string">'id'</span>])): <span class="meta">?&gt;</span></span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"id"</span> value=<span class="string">"&lt;?php echo $item['id'] ?&gt;"</span>&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">endif</span>; <span class="meta">?&gt;</span></span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"value"</span> value=<span class="string">"&lt;?php echo isset($item['item_name']) ? $item['item_name'] : '' ?&gt;"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">"/item/index"</span>&gt;返回&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>message.php：作用为提示信息</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"/item/index"</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $message <span class="meta">?&gt;</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP编程</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>solr安装配置并增加中文分词器笔记</title>
    <url>/2017/07/03/solr-install-config/</url>
    <content><![CDATA[<p>Solr是一个高性能，采用Java5开发，基于Lucene的全文搜索服务器。同时对其进行了扩展，提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展并对查询性能进行了优化，并且提供了一个完善的功能管理界面，是一款非常优秀的全文搜索引擎。本文将对solr安装配置做详细记录，望指正。</p>
<a id="more"></a>
<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ul>
<li>虚拟机环境（任意linux，本文使用CentOS6.8final）</li>
<li>JDK：1.8.0_131</li>
<li>Tomcat: 8.5.16</li>
<li>Solr：6.6.0</li>
<li>IK-analyze-solr（中文分词器）</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1.安装JDK"></a>1.安装JDK</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm - ivh jdk-8u131-linux-x64.rpm</span><br><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件末尾增加:</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_131</span><br><span class="line">JRE_HOME=/usr/java/jdk1.8.0_131/jre</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>
<p><code>马上生效</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<h4 id="2-安装Tomcat"><a href="#2-安装Tomcat" class="headerlink" title="2.安装Tomcat"></a>2.安装Tomcat</h4><h5 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd usr/local/</span><br><span class="line">mkdir appserver</span><br><span class="line">cd appserver/</span><br></pre></td></tr></table></figure>
<h5 id="将tomcat压缩包放到新建的目录APPserver下，并解压，解压之后重命名为tomcat"><a href="#将tomcat压缩包放到新建的目录APPserver下，并解压，解压之后重命名为tomcat" class="headerlink" title="将tomcat压缩包放到新建的目录APPserver下，并解压，解压之后重命名为tomcat"></a>将tomcat压缩包放到新建的目录APPserver下，并解压，解压之后重命名为tomcat</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxv -f apache-tomcat-8.5.16.tar.gz</span><br><span class="line">mv apache-tomcat-8.5.16 tomcat</span><br><span class="line">cd tomcat</span><br></pre></td></tr></table></figure>
<h5 id="测试tomcat是否安装成功"><a href="#测试tomcat是否安装成功" class="headerlink" title="测试tomcat是否安装成功"></a>测试tomcat是否安装成功</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/appserver/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>
<p>出现<strong>tomcat started</strong>表示成功启动<br>这时候我们可以在windows下面使用<a href="http://ip:8080访问，如能够显示Tomcat的主页，则表示不需要进行任何操作了，如不能显示，则需要在Linux中开放防火墙的8080端口。">http://ip:8080访问，如能够显示Tomcat的主页，则表示不需要进行任何操作了，如不能显示，则需要在Linux中开放防火墙的8080端口。</a></p>
<h5 id="在Linux下面的防火墙里面开放8080端口"><a href="#在Linux下面的防火墙里面开放8080端口" class="headerlink" title="在Linux下面的防火墙里面开放8080端口"></a>在Linux下面的防火墙里面开放8080端口</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>
<p><code>打开之后按键盘（i）进入编辑模式，写入开放8080端口，如图所示：</code><br><img src="/" class="lazyload" data-src="/images/iptables.jpg"  alt="开启防火墙端口"></p>
<p><code>写完之后我们按键盘（ESC）按钮退出，然后按（:wq）保存并且关闭Vi。</code></p>
<h5 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>
<h5 id="设置tomcat的服务器启动和关闭"><a href="#设置tomcat的服务器启动和关闭" class="headerlink" title="设置tomcat的服务器启动和关闭"></a>设置tomcat的服务器启动和关闭</h5><p><code>执行命令：vi /etc/rc.d/init.d/tomcat，创建脚本文件</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/init.d/tomcat</span><br></pre></td></tr></table></figure>
<p><code>在文件中写入如下代码，保存并且退出</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># /etc/rc.d/init.d/tomcat</span></span><br><span class="line"><span class="comment"># init script for tomcat precesses</span></span><br><span class="line"><span class="comment"># processname: tomcat</span></span><br><span class="line"><span class="comment"># description: tomcat is a j2se server</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 86 16</span></span><br><span class="line"><span class="comment"># description: Start up the Tomcat servlet engine.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/init.d/<span class="built_in">functions</span> ]; <span class="keyword">then</span></span><br><span class="line">. /etc/init.d/<span class="built_in">functions</span></span><br><span class="line"><span class="keyword">elif</span> [ -f /etc/rc.d/init.d/<span class="built_in">functions</span> ]; <span class="keyword">then</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\atomcat: unable to locate functions lib. Cannot continue."</span></span><br><span class="line"><span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">RETVAL=$?</span><br><span class="line">CATALINA_HOME=<span class="string">"/usr/local/appserver/tomcat"</span>   <span class="comment">#tomcat安装目录，你安装在什么目录下就复制什么目录</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$CATALINA_HOME</span>/bin/startup.sh ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> $<span class="string">"Starting Tomcat"</span></span><br><span class="line"><span class="variable">$CATALINA_HOME</span>/bin/startup.sh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> $<span class="string">"Stopping Tomcat"</span></span><br><span class="line"><span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop&#125;"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br><span class="line"></span><br><span class="line">Linux</span><br></pre></td></tr></table></figure>
<p><code>给文件添加权限，使得脚本文件可以执行，命令为</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 /etc/rc.d/init.d/tomcat</span><br></pre></td></tr></table></figure>
<p><code>将其添加到服务中，命令为</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig --add /etc/rc.d/init.d/tomcat</span><br></pre></td></tr></table></figure>
<p><code>然后将下面的配置文件加到tomcat中的catalina.sh文件中的最后面，命令为</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/local/appserver/tomcat/bin/catalina.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#javajdk的安装路径，使用echo $JAVA_HOME命令可以读取</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_131</span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME=/usr/<span class="built_in">local</span>/appserver/tomcat</span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=/usr/<span class="built_in">local</span>/appserver/tomcat</span><br><span class="line"><span class="built_in">export</span> CATALINA_TMPDIR=/usr/<span class="built_in">local</span>/appserver/tomcat/temp</span><br></pre></td></tr></table></figure>
<p><code>以上所有工作顺利进行并且没有报错，则配置完成，你可以输入命令service tomcat start和service tomcat stop进行验证</code></p>
<h5 id="设置tomcat的开机启动"><a href="#设置tomcat的开机启动" class="headerlink" title="设置tomcat的开机启动"></a>设置tomcat的开机启动</h5><p><code>打开linux设置开启启动的文件，将下面的配置文件写入此文件的最后，命令为</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_131</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME=/usr/<span class="built_in">local</span>/appserver/tomcat/</span><br><span class="line"><span class="comment">#tomcat自启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/appserver/tomcat/bin/startup.</span><br></pre></td></tr></table></figure>
<p><code>tomcat依赖于Java的jdk，所以设置的时候讲jdk也同步导入。</code><br><code>完成上面的步骤之后我们就可以将centos关机重启检查一番。</code></p>
<h4 id="3-安装Solr"><a href="#3-安装Solr" class="headerlink" title="3.安装Solr"></a>3.安装Solr</h4><p>1.将 solr 压缩包中solr\server\solr-webapp\文件夹下有个webapp文件夹，将之复制到tomcat\webapps\目录下，文件夹名改成ROOT(任意) ；<br>2.将 solr 压缩包中 solr\server\lib\ext 中的 jar 全部复制到 Tomcat\ webapps\ROOT\WEB-INF\lib 目录中；<br>3.将solr压缩包中solr/server/lib/metrics* 开头的jar全部复制到 Tomcat\ webapps\ROOT\WEB-INF\lib 目录中；<br>4.将solr压缩包中solr/server/lib/solr-dataimporthandler-* 开头的jar全部复制到 Tomcat\ webapps\ROOT\WEB-INF\lib 目录中；<br>5.在Tomcat\ webapps\ROOT\WEB-INF\下建立classes目录，并将solr/server/resources/log4j.properties文件复制其中；<br>6.在tomcat目录下建立solrhome目录（也可以放在其它目录中）<br>7.复制solr/server/solr/* 所有文件到tomcat/solrhome目录，用到创建solr的core时使用。<br><code>以上步骤的shell如下:</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -R /root/solr-6.6.0/server/solr-webapp/webapp /usr/local/appserver/tomcat/webapps/ROOT</span><br><span class="line">cp -R /root/solr-6.6.0/server/lib/ext/* /usr/local/appserver/tomcat/webapps/ROOT/WEB-INF/lib/</span><br><span class="line">cp -R /root/solr-6.6.0/server/lib/metrics*.* /usr/local/appserver/tomcat/webapps/ROOT/WEB-INF/lib/</span><br><span class="line">cp /root//solr-6.6.0/dist/solr-dataimporthandler-* /usr/local/appserver/tomcat/webapps/ROOT/WEB-INF/lib/</span><br><span class="line">mkdir /usr/local/appserver/tomcat/webapps/ROOT/WEB-INF/classes</span><br><span class="line">cp /root/solr-6.6.0/server/resources/log4j.properties /usr/local/appserver/tomcat/webapps/ROOT/WEB-INF/classes/</span><br><span class="line">mkdir /usr/local/appserver/tomcat/solrhome</span><br><span class="line">cp -R /root/solr-6.6.0/server/solr/* /usr/local/appserver/tomcat/solrhome/</span><br></pre></td></tr></table></figure>
<h5 id="配置Solr"><a href="#配置Solr" class="headerlink" title="配置Solr"></a>配置Solr</h5><p>编辑web.xml文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/local/appserver/tomcat/webapps/ROOT/WEB-INF/web.xml</span><br></pre></td></tr></table></figure>
<p>1.配置solr下core路径，找如下配置内容（初始状态下该内容是被注释掉的）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">env-entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-name</span>&gt;</span>solr/home<span class="tag">&lt;/<span class="name">env-entry-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-value</span>&gt;</span>/usr/local/appserver/tomcat/solrhome<span class="tag">&lt;/<span class="name">env-entry-value</span>&gt;</span> //将路径指向我们创建的solrhome目录。</span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-type</span>&gt;</span>java.lang.String<span class="tag">&lt;/<span class="name">env-entry-type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">env-entry</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.配置访问权限：找到如下内容，并注释掉：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;security-constraint&gt;</span></span><br><span class="line"><span class="comment">        &lt;web-resource-collection&gt;</span></span><br><span class="line"><span class="comment">        &lt;web-resource-name&gt;Disable TRACE&lt;/web-resource-name&gt;</span></span><br><span class="line"><span class="comment">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">        &lt;http-method&gt;TRACE&lt;/http-method&gt;</span></span><br><span class="line"><span class="comment">        &lt;/web-resource-collection&gt;</span></span><br><span class="line"><span class="comment">        &lt;auth-constraint/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/security-constraint&gt;</span></span><br><span class="line"><span class="comment">        &lt;security-constraint&gt;</span></span><br><span class="line"><span class="comment">        &lt;web-resource-collection&gt;</span></span><br><span class="line"><span class="comment">        &lt;web-resource-name&gt;Enable everything but TRACE&lt;/web-resource-name&gt;</span></span><br><span class="line"><span class="comment">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">        &lt;http-method-omission&gt;TRACE&lt;/http-method-omission&gt;</span></span><br><span class="line"><span class="comment">        &lt;/web-resource-collection&gt;</span></span><br><span class="line"><span class="comment">    &lt;/security-constraint&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="Solr访问管理"><a href="#Solr访问管理" class="headerlink" title="Solr访问管理"></a>Solr访问管理</h5><p><code>ip:端口/solr/index.html</code></p>
<h4 id="增加中文分析器"><a href="#增加中文分析器" class="headerlink" title="增加中文分析器"></a>增加中文分析器</h4><p>1.将Ikik-analyzer-solr.jar放到Tomcat下的\solr\WEB-INF\lib下<br>2.将下载的IKAnalyzer.cfg.xml、mydict.dic、stopword.dic放到Tomcat中的solr\WEB-INF\classes目录下，如果没有classes文件夹就创建<br>3.修改/usr/local/appserver/tomcat/solrhome/mycore/conf下的managed-schema文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- chinese analyzer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置的业务域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">type</span>=<span class="string">"text_ik"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="/" class="lazyload" data-src="/images/solr.jpg"  alt="solr中文分词测试"></p>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>solr</tag>
        <tag>索引库</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo框架+SOA服务鼓捣记</title>
    <url>/2017/07/01/dubbo-soa/</url>
    <content><![CDATA[<p>Dubbo是一个被国内很多互联网公司广泛使用的开源分布式服务框架，即使从国际视野来看应该也是一个非常全面的SOA基础框架。</p>
<a id="more"></a>
<p><strong>两个架构</strong></p>
<h3 id="1-分布式架构"><a href="#1-分布式架构" class="headerlink" title="1.分布式架构"></a>1.分布式架构</h3><p>1.系统按照模块拆分成多个子系统<br>2.子系统间的通信使用WebService相互协作完成业务流程<br>3.本系统使用dubbo框架做通信</p>
<h3 id="2-SOA架构"><a href="#2-SOA架构" class="headerlink" title="2.SOA架构"></a>2.SOA架构</h3><p>1.Service Oriented Architecture 面向服务的架构<br>2.把工程拆分成服务层.表现层两个工程</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><h4 id="一、Dubbo框架"><a href="#一、Dubbo框架" class="headerlink" title="一、Dubbo框架"></a>一、Dubbo框架</h4><p>Dubbo框架是阿里巴巴SOA服务化治理方案的核心框架。具体一些概念可以直接官网 <a href="http://dubbo.io/" target="_blank" rel="noopener">网页链接</a><br>这里简要说明一下（摘自官网）：</p>
<h5 id="为什么用Dubbo？"><a href="#为什么用Dubbo？" class="headerlink" title="为什么用Dubbo？"></a>为什么用Dubbo？</h5><p>在大规模服务化之前，应用可能只是通过RMI或Hessian等工具，简单的暴露和引用远程服务，通过配置服务的URL地址进行调用，通过F5等硬件进行负载均衡。<br>但是当服务越来越多的时候，缺点就会暴露出来：<br>a）服务URL配置管理变得非常困难，F5硬件负载均衡器的单点压力也越来越大。<br>b） 当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。<br>c）接着，服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？</p>
<h5 id="Dubbo框架可以解决的问题："><a href="#Dubbo框架可以解决的问题：" class="headerlink" title="Dubbo框架可以解决的问题："></a>Dubbo框架可以解决的问题：</h5><p>a）服务注册中心，动态的注册和发现服务，使服务透明，避免了大量的URL<br>b）消费方通过服务方提供的地址列表，实现负载均衡和Failover<br>c）统计服务的调用量、响应时间会做统计作为权重调整、机器数量规划的参考指标</p>
<h5 id="Dubbo必备的元素："><a href="#Dubbo必备的元素：" class="headerlink" title="Dubbo必备的元素："></a>Dubbo必备的元素：</h5><p>运营容器（Container）<br>服务器注册中心（Register）<br>服务提供方（Provider）<br>服务消费方（Consumer）<br>统计监控中心（Monitor）<br><img src="/" class="lazyload" data-src="/images/dubbo-relation.jpg"  alt="依赖关系"></p>
<h4 id="二、SOA"><a href="#二、SOA" class="headerlink" title="二、SOA"></a>二、SOA</h4><h5 id="SOA是什么"><a href="#SOA是什么" class="headerlink" title="SOA是什么?"></a>SOA是什么?</h5><p>SOA（service-oriented architecture) 面向服务的体系结构。<br>SOA并不是一种架构技术，是一个组件模型，它将应用程序的不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种这样的系统中的服务可以以一种统一和通用的方式进行交互。<br><strong><code>在Dubbo中的Provider和Consumer都是一个个的Service（服务），当然Dubbo框架自身中的Monitor也是服务。</code></strong></p>
<h5 id="SOA常见的结构"><a href="#SOA常见的结构" class="headerlink" title="SOA常见的结构"></a>SOA常见的结构</h5><p><img src="/" class="lazyload" data-src="/images/soa.png"  alt="组织架构"><br><strong>应用程序前端：</strong>业务流程的所有者，应用层：APP、WEB等<br><strong>服务库：</strong>管理多个SOA服务（Dubbo的Provider和Consumer）<br><strong>服务总线：</strong>SOA服务的调度（Dubbo的Register和Container）<br><strong>合约：</strong>服务实现功能的协议和约束<br><strong>实现：</strong>服务业务的基础结构，包括业务逻辑和数据逻辑，对接口功能的实现<br><strong>接口：</strong>对外公开的功能</p>
<h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><p>电商平台业务架构做个简单说明。<br>电商平台服务包括：<br>商品服务<br>订单服务<br>价格中心服务<br>…<br>应用程序前端可以有：PC站、M站、APP等</p>
<h4 id="Dubbo-SOA的体现"><a href="#Dubbo-SOA的体现" class="headerlink" title="Dubbo+SOA的体现"></a>Dubbo+SOA的体现</h4><p>a）Dubbo框架将这些服务需要进行注册，进行统一的暴露和监控；<br>b）而每个服务的结构都是SOA的模型；<br>c）由应用程序前端的服务进行消费；<br><strong>以订单服务为例：</strong><br>如，订单服务提供 下单接口（如createOrder）、参数（合约），和实现；<br>服务启动的时候，Dubbo框架会加载服务并注册，并将createOrder暴露给消费者；<br>应用程序前端服务（比如App、PC站）下单的时候，都可以消费（调用）createOrder接口，从而实现下单业务流程。<br><strong><code>Dubbo可以监控不同时间段App、PC站并发下单量，响应时间等等，及时调整机器数量和权重，实现利益最大化。</code></strong></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="开发工具："><a href="#开发工具：" class="headerlink" title="开发工具："></a>开发工具：</h4><ul>
<li>Eclipse | Idea</li>
<li>Maven</li>
<li>zookeeper<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5>项目是maven构建，使用了 maven的继承、组合等技能。<h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5>Eclipse表现结构图如下：<br><img src="/" class="lazyload" data-src="/images/dubboproject.png"  alt="项目结构"><br>Idea表现结构图如下：<br><img src="/" class="lazyload" data-src="/images/dubboprojectidea.png"  alt="项目结构"></li>
<li>dubboProject是整个项目的一级项目（pom），其中包含了dubbo-common、dubboDemo和dubboSoa</li>
<li>dubbo-common是所有项目依赖的底层java包，输出的是jar</li>
<li>dubboDemo是一个web应用（war），可以理解为应用程序前端</li>
<li>dubboSoa是其中一个服务，是二级项目（pom）；因为一个SOA服务是由接口（_api）、协议、客户端应用（_client）、服务实现（数据）组成（其中service使用了2种方式：_service 纯java服务，_service_server  web应用（war）)；<h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3>认证密码: <strong>efvn</strong><br><a href="http://pan.baidu.com/s/1dE7dttf" target="_blank" rel="noopener">点我下载</a></li>
</ul>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>dubbo</tag>
        <tag>soa</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的任务调度框架Quartz与Spring框架简单使用</title>
    <url>/2017/06/02/java-Spring-Quartz/</url>
    <content><![CDATA[<p>Quartz是一个开源的作业调度框架它完全由Java写成，并设计用于 J2SE 和 J2EE 应用中。它提供了巨大的灵活性而不牺牲简单性。你能够用它来为执行一个作业而创建简单的或复杂的调度。本系统结合通过 Spring 来集成 Quartz 。以下只是一个简单的测试。</p>
<a id="more"></a>
<p>1.首先编写一个用于任务调度的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailJob</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"任务执行完成了"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.编写配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Quartz的配置<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 定义一个任务 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailJob"</span> <span class="attr">class</span>=<span class="string">"com.qcec.erp.job.MailJob"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 定义一个调用的方法 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"methodInvoking"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"mailJob"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"send"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定时间 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cronTrigger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"methodInvoking"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 任务调度表达式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0/10 * * * * ? *"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定一个总调度器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"scheduler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"cronTrigger"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.对于CornExpress使用如下:</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>允许值</th>
<th>允许的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>分</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时</td>
<td>0-23</td>
<td>, - * /</td>
</tr>
<tr>
<td>日期</td>
<td>1-31</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>月份</td>
<td>1-12或者JAN-DEC</td>
<td>, - * /</td>
</tr>
<tr>
<td>星期</td>
<td>1-7或者SUN-SAT</td>
<td>, - * ? / L C #</td>
</tr>
<tr>
<td>年</td>
<td>1970-2099</td>
<td>, - * /</td>
</tr>
</tbody></table>
<p>表达式   意义<br>“0 0 12 * * ?”    每天中午12点触发<br>“0 15 10 ? * *“    每天上午10:15触发<br>“0 15 10 * * ?”    每天上午10:15触发<br>“0 15 10 * * ? *“    每天上午10:15触发<br>“0 15 10 * * ? 2005”    2005年的每天上午10:15触发<br>“0 * 14 * * ?”    在每天下午2点到下午2:59期间的每1分钟触发<br>“0 0/5 14 * * ?”    在每天下午2点到下午2:55期间的每5分钟触发<br>“0 0/5 14,18 * * ?”    在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发<br>“0 0-5 14 * * ?”    在每天下午2点到下午2:05期间的每1分钟触发<br>“0 10,44 14 ? 3 WED”    每年三月的星期三的下午2:10和2:44触发<br>“0 15 10 ? * MON-FRI”    周一至周五的上午10:15触发<br>“0 15 10 15 * ?”    每月15日上午10:15触发<br>“0 15 10 L * ?”    每月最后一日的上午10:15触发<br>“0 15 10 ? * 6L”    每月的最后一个星期五上午10:15触发<br>“0 15 10 ? * 6L 2002-2005”    2002年至2005年的每月的最后一个星期五上午10:15触发<br>“0 15 10 ? * 6#3”    每月的第三个星期五上午10:15触发</p>
<p>特殊字符   意义<br>*    表示所有值；<br>?    表示未说明的值，即不关心它为何值；<br>-    表示一个指定的范围；<br>,    表示附加一个可能值；<br>/    符号前表示开始时间，符号后表示每次递增的值；<br>L(“last”)    (“last”) “L” 用在day-of-month字段意思是 “这个月最后一天”；用在 day-of-week字段, 它简单意思是 “7” or “SAT”。 如果在day-of-week字段里和数字联合使用，它的意思就是 “这个月的最后一个星期几” – 例如： “6L” means “这个月的最后一个星期五”. 当我们用“L”时，不指明一个列表值或者范围是很重要的，不然的话，我们会得到一些意想不到的结果。<br>W(“weekday”)    只能用在day-of-month字段。用来描叙最接近指定天的工作日（周一到周五）。例如：在day-of-month字段用“15W”指“最接近这个月第15天的工作日”，即如果这个月第15天是周六，那么触发器将会在这个月第14天即周五触发；如果这个月第15天是周日，那么触发器将会在这个月第16天即周一触发；如果这个月第15天是周二，那么就在触发器这天触发。注意一点：这个用法只会在当前月计算值，不会越过当前月。“W”字符仅能在day-of-month指明一天，不能是一个范围或列表。也可以用“LW”来指定这个月的最后一个工作日。<br>#    只能用在day-of-week字段。用来指定这个月的第几个周几。例：在day-of-week字段用”6#3”指这个月第3个周五（6指周五，3指第3个）。如果指定的日期不存在，触发器就不会触发。<br>C    指和calendar联系后计算过的值。例：在day-of-month 字段用“5C”指在这个月第5天或之后包括calendar的第一天；在day-of-week字段用“1C”指在这周日或之后包括calendar的第一天</p>
<p>测试结果:<br><img src="/" class="lazyload" data-src="/images/quartz.png"  alt=""></p>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>Quartz</tag>
        <tag>任务调度</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Spring与javaMail发送邮件</title>
    <url>/2017/05/29/spring-javamail/</url>
    <content><![CDATA[<p>随着越来越流行的手机短信的发展，在项目中发邮件使用的比较少，但是毕竟是离不开的，因为短信需要花钱购买，另外有不稳定因素。所以有些功能还是借助于邮件比较好。比如：后端用户增加，可以发送邮件给用户。也可以用来做激活账号等。以下是使用Spring框架中JavaMail所做的测试例子</p>
<a id="more"></a>
<h5 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h5><p> 1.jar包<br> 2.properties文件<br> 3.配置applicationContext.xml<br>具体代码:<br> email.properties文件编写</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mail.host</span>=<span class="string">发件主机</span></span><br><span class="line"><span class="meta">mail.username</span>=<span class="string">发件账号</span></span><br><span class="line"><span class="meta">mail.password</span>=<span class="string">发件密码</span></span><br><span class="line"><span class="meta">mail.from</span>=<span class="string">发件账号@主机</span></span><br></pre></td></tr></table></figure>
<p>applicationContext.xml增加如下信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载properties配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:email.properties"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailMessage"</span> <span class="attr">class</span>=<span class="string">"org.springframework.mail.SimpleMailMessage"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"from"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;mail.from&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 查看SimpleMailMessage源码还可以注入标题,内容等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 申明JavaMailSenderImpl对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailSender"</span> <span class="attr">class</span>=<span class="string">"org.springframework.mail.javamail.JavaMailSenderImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.host&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaMailProperties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 设置认证开关 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.auth"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 启动调试开关 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.debug"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 设置发送延时 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.timeout"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="具体代码编写"><a href="#具体代码编写" class="headerlink" title="具体代码编写:"></a>具体代码编写:</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送一个简单的邮件</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendSimpleMail</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext-mail.xml"</span>);</span><br><span class="line">		SimpleMailMessage message = (SimpleMailMessage)context.getBean(<span class="string">"mailMessage"</span>);</span><br><span class="line">		message.setSubject(<span class="string">"this is a test"</span>);</span><br><span class="line">		message.setText(<span class="string">"this is a test Content"</span>);</span><br><span class="line">		message.setTo(<span class="string">"702082555@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">		JavaMailSender sender = (JavaMailSender) context.getBean(<span class="string">"mailSender"</span>);</span><br><span class="line">		sender.send(message);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>接收邮件:<br><img src="/" class="lazyload" data-src="/images/simpleMessage.png"  alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送图片带附件的邮件</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendMimeMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext-mail.xml"</span>);</span><br><span class="line">	JavaMailSender sender = (JavaMailSender) context.getBean(<span class="string">"mailSender"</span>);</span><br><span class="line">	MimeMessage message = sender.createMimeMessage();</span><br><span class="line">	<span class="comment">//使用工具类</span></span><br><span class="line">	MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message,<span class="keyword">true</span>);</span><br><span class="line">	<span class="comment">//设置各种信息</span></span><br><span class="line">	helper.setFrom(<span class="string">"zhangp159@163.com"</span>);</span><br><span class="line">	helper.setTo(<span class="string">"702082555@qq.com"</span>);</span><br><span class="line">	helper.setSubject(<span class="string">"this is a mimeMessage"</span>);</span><br><span class="line">	helper.setText(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;hello!!PictureMessage&lt;/h1&gt;"</span></span><br><span class="line">				+<span class="string">"&lt;a href=http://www.itjason.com&gt;itjason&lt;/a&gt;&lt;img src=cid:image/&gt;&lt;/body&gt;&lt;/html&gt;"</span>,<span class="keyword">true</span>);<span class="comment">//此处第二个参数说明内容为html代码</span></span><br><span class="line">	<span class="comment">//创建文件流</span></span><br><span class="line">	FileSystemResource resource = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="string">"G:/itjason.gif"</span>));</span><br><span class="line">	helper.addInline(<span class="string">"image"</span>, resource);</span><br><span class="line">	<span class="comment">//带一个附件</span></span><br><span class="line">	FileSystemResource fileZip = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="string">"G:/itjason.zip"</span>));</span><br><span class="line">	helper.addAttachment(<span class="string">"站点资源"</span>, fileZip);</span><br><span class="line">	sender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接收邮件:<br><img src="/" class="lazyload" data-src="/images/mimeMessage.png"  alt=""></p>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>JavaMail</tag>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Ajax下载</title>
    <url>/2017/05/26/ajax-download/</url>
    <content><![CDATA[<p>JQuery的ajax函数的返回类型只有xml、text、json、html等类型，没有“流”类型，所以我们要实现ajax下载，不能够使用相应的ajax函数进行文件下载。但可以用js生成一个form，用这个form提交参数，并返回“流”类型的数据。在实现过程中，页面也没有进行刷新。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="keyword">get</span>('order.php?act=export&amp;confirm_start_time='+inpstart.toString()+'&amp;confirm_end_time='+inpend.toString(),&#123;status:status&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.error==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> form=$(<span class="string">"&lt;form&gt;"</span>);<span class="comment">//定义一个form表单</span></span><br><span class="line">                form.attr(<span class="string">"style"</span>,<span class="string">"display:none"</span>);</span><br><span class="line">                form.attr(<span class="string">"target"</span>,<span class="string">""</span>);</span><br><span class="line">                form.attr(<span class="string">"method"</span>,<span class="string">"post"</span>);</span><br><span class="line">                form.attr(<span class="string">"action"</span>,<span class="string">'order.php?act=export_excel&amp;confirm_start_time='</span>+inpstart.toString()+<span class="string">'&amp;confirm_end_time='</span>+inpend.toString());</span><br><span class="line">                <span class="keyword">var</span> input1=$(<span class="string">"&lt;input&gt;"</span>);</span><br><span class="line">                input1.attr(<span class="string">"type"</span>,<span class="string">"hidden"</span>);</span><br><span class="line">                input1.attr(<span class="string">"name"</span>,<span class="string">"exportData"</span>);</span><br><span class="line">                input1.attr(<span class="string">"value"</span>,(<span class="keyword">new</span> <span class="built_in">Date</span>()).getMilliseconds());</span><br><span class="line">                $(<span class="string">"body"</span>).append(form);<span class="comment">//将表单放置在web中</span></span><br><span class="line">                form.append(input1);</span><br><span class="line"></span><br><span class="line">                form.submit();<span class="comment">//表单提交</span></span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                swal(<span class="string">"操作失败!"</span>,data.message, <span class="string">"warning"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">'json'</span>)</span><br></pre></td></tr></table></figure>
<p>效果如下:<br><img src="/" class="lazyload" data-src="/images/ajax_download.png"  alt="显示结果"></p>
]]></content>
      <categories>
        <category>Web编程</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 64bit nexus3 安装</title>
    <url>/2017/05/25/nexusus/</url>
    <content><![CDATA[<p>为什么要搭建nexus私服，原因很简单，公司不提供外网给项目组人员，因此就不能使用maven访问远程的仓库地址，所以很有必要在局域网里找一台有外网权限的机器，搭建nexus私服，然后开发人员连到这台私服上，这样的话就可以通过这台搭建了nexus私服的电脑访问maven的远程仓库。</p>
<a id="more"></a>
<p>1.首先确定我们的环境安装好maven，jdk等必须的环境</p>
<p>2.这些都准备好之后，去下载最新版本的nexus<br>    下载地址：<a href="http://www.sonatype.org/nexus/go" target="_blank" rel="noopener">http://www.sonatype.org/nexus/go</a></p>
<p>我本地安装的是 nexus-3.3.1-01</p>
<p>1.打开命令行，切换到nexus-3.3.1-01\bin目录下，回车。<br>例：D:\develop\nexus-3.3.1-01\bin<br>2.输入：nexus.exe/run，并回车<br>3.执行后出现以下信息表示安装成功:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-------------------------------------------------</span><br><span class="line"></span><br><span class="line">Started Sonatype Nexus OSS 3.3.1-01</span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line">2017-05-25 23:24:46,575+0800 INFO  [qtp1381493466-69] *UNKNOWN org.apache.shiro.session.mgt.AbstractValidatingSessionManager - Enabling session</span><br><span class="line"> validation scheduler...</span><br><span class="line">2017-05-25 23:24:46,585+0800 INFO  [qtp1381493466-69] *UNKNOWN org.sonatype.nexus.internal.security.anonymous.AnonymousManagerImpl - Using defa</span><br><span class="line">ult configuration: AnonymousConfiguration&#123;enabled=<span class="literal">true</span>, userId=<span class="string">'anonymous'</span>, realmName=<span class="string">'NexusAuthorizingRealm'</span>&#125;</span><br><span class="line">2017-05-25 23:25:00,081+0800 INFO  [qtp1381493466-65] *UNKNOWN com.sonatype.nexus.analytics.internal.EventSubmitterImpl - Service URL: https://</span><br><span class="line">analytics.sonatype.com</span><br><span class="line">2017-05-25 23:30:00,038+0800 INFO  [quartz-2-thread-1] *SYSTEM org.sonatype.nexus.quartz.internal.task.QuartzTaskInfo - Task <span class="string">'Storage facet cle</span></span><br><span class="line"><span class="string">anup'</span> [repository.storage-facet-cleanup] state change WAITING -&gt; RUNNING</span><br><span class="line">2017-05-25 23:30:00,061+0800 INFO  [quartz-2-thread-1] *SYSTEM org.sonatype.nexus.quartz.internal.task.QuartzTaskInfo - Task <span class="string">'Storage facet cle</span></span><br><span class="line"><span class="string">anup'</span> [repository.storage-facet-cleanup] state change RUNNING -&gt; WAITING (OK)</span><br></pre></td></tr></table></figure>
<p>4.打开浏览器，输入：localhost:8081，完成<br>显示界面如下即可<br><img src="/" class="lazyload" data-src="%5Cimages%5Cnexus.png"  alt="Nexus运行图"><br> 注意:如果是win10的最新版本，cmd被隐藏了。打开powershell。直接输入cmd回车再继续执行上面的命令。</p>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>nexus3</tag>
        <tag>JDK1.8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之架构SSH第二种整合</title>
    <url>/2017/05/17/java-ssh-v2/</url>
    <content><![CDATA[<p>Struts2+Spring+Hibernate三个框架整合(不包含hibernate.cfg.xml)版本，主要是对第一种方法的修改,仅仅只是去除了hibernate.cfg.xml配置文件,对于原基础上仅仅只是修改了applicationContext.xml文件，文中不再赘述第一版的过程，仅仅只是给出applicationContext.xml文件</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置连接池 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssh_v1"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 加载Hibernate的配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 将连接池注入 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置hibernate --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 配置可选 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 加载映射配置文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>com/ssh_v1/domain/Customer.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置平台事务管理器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 开启事务注解 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置action 因为Struts2是多例的这里必须给scope为多例--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAction"</span> <span class="attr">class</span>=<span class="string">"com.ssh_v1.web.action.CustomerAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!-- 将service注入到action中 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerService"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.ssh_v1.service.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 将dao注入service中 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerdao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.ssh_v1.dao.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>框架整合</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之架构SSH第一种整合</title>
    <url>/2017/05/16/java_ssh_v1/</url>
    <content><![CDATA[<p>Struts2+Spring+Hibernate三个框架整合(包含hibernate.cfg.xml)版本，文中不提供包说明。连接池使用C3P0，日志使用log4j。中间踩得坑：SSH说的上是javaweb经典框架，不能说100%要会SSH框架，但是大部分公司都在用，说到框架，都会提到ssh吧，这次就以很简单的例子来整合SSH框架。整合框架要注意的是先每个框架单独测通后再整合，不然整合后出现问题比较难排查。 新手可以慢慢看，老手请给予评价，文中代码部分可能会有点问题，实际都是经过测试过。没有问题的，具体的使用test包中test测试</p>
<a id="more"></a>
<h3 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h3><p><strong>概述</strong>:Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互</p>
<h3 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h3><p><strong>概述</strong>:Spring是一个分层的JavaSE/EEfull-stack(一站式) 轻量级开源框架。</p>
<h3 id="hibernate"><a href="#hibernate" class="headerlink" title="hibernate"></a>hibernate</h3><p><strong>概述</strong>:持久层的ORM(对象关系映射)框架</p>
<hr>
<h3 id="Struts2-spring-hibernate"><a href="#Struts2-spring-hibernate" class="headerlink" title="Struts2+spring+hibernate"></a>Struts2+spring+hibernate</h3><h4 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h4><h5 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h5><ul>
<li>com.itjason.ssh_v1.domain<ul>
<li>Customer.java</li>
<li>Customer.hbm.xml</li>
</ul>
</li>
<li>com.itjason.ssh_v1.dao<ul>
<li>CustomerDao.java</li>
<li>CustomerDaoImpl.java</li>
</ul>
</li>
<li>com.itjason.ssh_v1.service<ul>
<li>CustomerService.java</li>
<li>CustomerServiceImpl.java</li>
</ul>
</li>
<li>com.itjason.ssh_v1.web.action<ul>
<li>CustomerAction.java</li>
</ul>
</li>
<li>com.itjason.ssh_v1.test<ul>
<li>SSH_TEST.java</li>
</ul>
</li>
<li>applicationContext.xml</li>
<li>hibernate.cfg.xml</li>
<li>log4j.properties</li>
<li>structs.xml</li>
</ul>
<hr>
<h4 id="所有需要的jar包"><a href="#所有需要的jar包" class="headerlink" title="所有需要的jar包"></a>所有需要的jar包</h4><ol>
<li><p>Struts2框架</p>
<ul>
<li>struts-2.3.24\apps\struts2-blank\WEB-INF\lib*.jar</li>
<li>struts2-spring-plugin-2.3.24.jar</li>
</ul>
</li>
<li><p>Hibernate框架</p>
<ul>
<li>hibernate-release-5.0.7.Final\lib\required*.jar</li>
<li>slf4j-api-1.6.1.jar</li>
<li>slf4j-log4j12-1.7.2.jar</li>
<li>mysql-connector-java-5.1.7-bin.jar</li>
</ul>
</li>
<li><p>Spring框架</p>
<ul>
<li>IOC核心包</li>
<li>AOP核心包</li>
<li>JDBC模板和事务核心包</li>
<li>Spring整合JUnit测试包</li>
<li>Spring整合Hibernate核心包</li>
<li>Spring整合Struts2核心包</li>
</ul>
<hr>
</li>
</ol>
<p>Customer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Long cust_id;</span><br><span class="line">	<span class="keyword">private</span> String cust_name;</span><br><span class="line">	<span class="keyword">private</span> Long cust_user_id;</span><br><span class="line">	<span class="keyword">private</span> Long cust_create_id;</span><br><span class="line">	<span class="keyword">private</span> String cust_source;</span><br><span class="line">	<span class="keyword">private</span> String cust_industry;</span><br><span class="line">	<span class="keyword">private</span> String cust_level;</span><br><span class="line">	<span class="keyword">private</span> String cust_linkman;</span><br><span class="line">	<span class="keyword">private</span> String cust_phone;</span><br><span class="line">	<span class="keyword">private</span> String cust_mobile;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getCust_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_id</span><span class="params">(Long cust_id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_id = cust_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_name</span><span class="params">(String cust_name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_name = cust_name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getCust_user_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_user_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_user_id</span><span class="params">(Long cust_user_id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_user_id = cust_user_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getCust_create_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_create_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_create_id</span><span class="params">(Long cust_create_id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_create_id = cust_create_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_source</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_source;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_source</span><span class="params">(String cust_source)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_source = cust_source;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_industry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_industry;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_industry</span><span class="params">(String cust_industry)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_industry = cust_industry;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_level</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_level;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_level</span><span class="params">(String cust_level)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_level = cust_level;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_linkman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_linkman;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_linkman</span><span class="params">(String cust_linkman)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_linkman = cust_linkman;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_phone;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_phone</span><span class="params">(String cust_phone)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_phone = cust_phone;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_mobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_mobile;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_mobile</span><span class="params">(String cust_mobile)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_mobile = cust_mobile;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Customer [cust_id="</span> + cust_id + <span class="string">", cust_name="</span> + cust_name + <span class="string">", cust_user_id="</span> + cust_user_id</span><br><span class="line">				+ <span class="string">", cust_create_id="</span> + cust_create_id + <span class="string">", cust_source="</span> + cust_source + <span class="string">", cust_industry="</span></span><br><span class="line">				+ cust_industry + <span class="string">", cust_level="</span> + cust_level + <span class="string">", cust_linkman="</span> + cust_linkman + <span class="string">", cust_phone="</span></span><br><span class="line">				+ cust_phone + <span class="string">", cust_mobile="</span> + cust_mobile + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CustomerAction.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">9214561072731685641L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 使用模型驱动封装对象</span></span><br><span class="line"><span class="comment">	 * 必须手动给出Bean对象</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> customer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 注入业务层的对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> CustomerService customerService;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerService</span><span class="params">(CustomerService customerService)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.customerService = customerService;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 保存客户</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">		customerService.saveCustomer(customer);</span><br><span class="line">		<span class="keyword">return</span> NONE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CustomerService.Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCustomerById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CustomerServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前类所有的方法都具有事务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">CustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将dao注入到service中</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> CustomerDao customerdao;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerdao</span><span class="params">(CustomerDao customerdao)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.customerdao = customerdao;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 增加客户</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">		customerdao.saveCustomer(customer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过主键id删除客户</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCustomerById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">		customerdao.removeCustomerById(id);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过主键id修改客户</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">		customerdao.editCustomer(customer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查询所有的客户,返回list集合</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> customerdao.findAll();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CustomerDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCustomerById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CustomerDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 调用hibernate模板保存数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.getHibernateTemplate().save(customer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 调用hibernate模板删除数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCustomerById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//先获取对象</span></span><br><span class="line">		Customer customer = <span class="keyword">this</span>.getHibernateTemplate().get(Customer<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)</span>;</span><br><span class="line">		<span class="comment">//删除数据</span></span><br><span class="line">		<span class="keyword">this</span>.getHibernateTemplate().delete(customer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 调用hibernate模板修改数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.getHibernateTemplate().update(customer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 调用hibernate模板查询所有</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;Customer&gt; list = (List&lt;Customer&gt;) <span class="keyword">this</span>.getHibernateTemplate().find(<span class="string">"from Customer"</span>);</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Spring的监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置此过滤器,必须放在Struts2的过滤器之前,这里作用是延迟加载session,使session在WEB层中销毁 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Struts2核心过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Customer.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.itjason.ssh_v1.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cust_id"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_name"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_user_id"</span> <span class="attr">column</span>=<span class="string">"cust_user_id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_create_id"</span> <span class="attr">column</span>=<span class="string">"cust_create_id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_source"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_industry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_level"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_linkman"</span> <span class="attr">column</span>=<span class="string">"cust_linkman"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_phone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_mobile"</span> <span class="attr">column</span>=<span class="string">"cust_mobile"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>hibernate.cfg.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">	<span class="meta-string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span></span><br><span class="line"><span class="meta">	<span class="meta-string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 必须配置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///ssh_v1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 可选配置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 配置C3P0的连接池 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 映射配置文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/itjason/ssh_v1/domain/Customer.hbm.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### direct log messages to stdout ###</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span>=<span class="string">System.err</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### direct messages to file mylog.log ###</span></span><br><span class="line"><span class="meta">log4j.appender.file</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">c\:mylog.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### set log levels - for more verbose logging change 'info' to 'debug' ###</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">info, stdout</span></span><br></pre></td></tr></table></figure>
<p>structs.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">	<span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span></span><br><span class="line"><span class="meta">	<span class="meta-string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"ssh_v1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- class 路径需要与Spring中的配置id一致 --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"customer_*"</span> <span class="attr">class</span>=<span class="string">"customerAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 加载Hibernate的配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 加载核心配置文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:hibernate.cfg.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置平台事务管理器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 开启事务注解 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置action 因为Struts2是多例的这里必须给scope为多例--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAction"</span> <span class="attr">class</span>=<span class="string">"com.itjason.ssh_v1.web.action.CustomerAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!-- 将service注入到action中 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerService"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.itjason.ssh_v1.service.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 将dao注入service中 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerdao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.itjason.ssh_v1.dao.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> ssh_v1;</span><br></pre></td></tr></table></figure>

<p>测试代码:<br>SSH_TEST.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSH_TEST</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将CustomerService注入</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Resource</span>(name=<span class="string">"customerService"</span>)</span><br><span class="line">	<span class="keyword">private</span> CustomerService customerService;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试增加客户功能</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_addCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">		customer.setCust_name(<span class="string">"Ping"</span>);</span><br><span class="line">		customer.setCust_mobile(<span class="string">"13256235623"</span>);</span><br><span class="line">		customerService.addCustomer(customer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试删除客户功能</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_removeCustomerById</span><span class="params">()</span></span>&#123;</span><br><span class="line">		customerService.removeCustomerById(<span class="number">1L</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试修改客户功能</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_editCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">		customer.setCust_id(<span class="number">2L</span>);</span><br><span class="line">		customer.setCust_name(<span class="string">"zhang"</span>);</span><br><span class="line">		customerService.editCustomer(customer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试查询客户</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;Customer&gt; list = customerService.findAll();</span><br><span class="line">		System.out.println(list);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java编程</category>
      </categories>
      <tags>
        <tag>框架整合</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>开篇</title>
    <url>/2014/11/29/first_blog/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不知道要写一些什么东西。但万事都要有一个开始，也许开始写的非常不好，没有什么思想，文章也没有思路，更不用说读者了。我也要努力把这个博客写好，自己是自己的读者，认真地写。</p>
<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;写博客的水平就像火车的开动，开始的速度很慢，威力很小，但是一旦开动起来，慢慢地加速，不断地积累能量，就会产生极大地能量，极大地速度，最后产生质的飞跃，无人能够阻挡。</p>
<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我问自己为什么要写博客呢？我想原因有一下几点，首先、是激励作用，优秀程序员之路是一个艰辛而漫长的路程，道路中充满了艰辛、曲折和挑战，而我选择了这条道路，就要义无反顾，不断的向前进。这其中需要我不断的自我激励，因为这条路有时候是孤独的，一个人孤军奋斗，没有人去鼓励你，只有自己一个人默默忍受，这时候要不断的自我激励。其次、要有计划的学一些知识，不光是技术知识，还要分析当今软件、互联网等的发展趋势和发展潮流。检验自己学习的最好方法是教授别人或者就是自己把它详细的，用自己的语言描述出来。通过写博客，我可一整理自己的思路，对自己学习的知识有更加清醒的认识，也许在写的同时说不定会有灵感冒出来，哈哈。再次，写博客的一个重要目的就是交流。通过读别人的博客，我学到很多的知识，同时写希望通过博客分享自己的一些想法。把自己的思想清楚的表达出来，并让别人知道，如果有一种好的想法，可以提供给别人让别人收益或有感想，我会很高兴。当然写博客的好处还有很多，我只是把自己对此的一些想法表达出来。</p>
<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后面我会一直去写。我想后面写的内容会包括自己的学习的新知识、新技术和一些感想。我会把一些学习的内容写到我的博客里。不断的学习一些数据结构、算法的知识，这才是程序的灵魂，不能忽视！</p>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>随便说说</tag>
      </tags>
  </entry>
</search>
